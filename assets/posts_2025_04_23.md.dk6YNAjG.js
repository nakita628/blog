import{_ as i,C as d,c as m,o as r,a7 as A,b as s,j as t,w as a,a as l,G as c,a8 as p}from"./chunks/framework.CbZ0TyXs.js";const f=JSON.parse('{"title":"Clean Architecture 単一責任の原則","description":"Clean Architecture 単一責任の原則","frontmatter":{"date":"2025-04-23T00:00:00.000Z","title":"Clean Architecture 単一責任の原則","description":"Clean Architecture 単一責任の原則","tags":["Clean Architecture"],"prev":{"text":"Clean Architecture 設計の原則","link":"/posts/2025/04/22"},"next":{"text":"Clean Architecture オープン・クローズドの原則","link":"/posts/2025/04/24"}},"headers":[],"relativePath":"posts/2025/04/23.md","filePath":"posts/2025/04/23.md"}'),n={name:"posts/2025/04/23.md"};function u(E,e,y,h,_,B){const o=d("Mermaid");return r(),m("div",null,[e[3]||(e[3]=A('<h1 id="clean-architecture-単一責任の原則" tabindex="-1">Clean Architecture 単一責任の原則 <a class="header-anchor" href="#clean-architecture-単一責任の原則" aria-label="Permalink to &quot;Clean Architecture 単一責任の原則&quot;">​</a></h1><p> 複数のユーザーやステークホルダーがシステムを同じように変更したいと考えることもある。変更を望む人たちを一まとめにしたグループとして扱い。このグループのことをアクターと呼ぶことにする。</p><ul><li>モジュールはたったひとつのアクターに対して責務を負うべきである。</li></ul><p> ここでいう「モジュール」は、ソースファイルのこと。</p><ul><li>アクターの異なるコードは分割するべき</li></ul><h2 id="解決策" tabindex="-1">解決策 <a class="header-anchor" href="#解決策" aria-label="Permalink to &quot;解決策&quot;">​</a></h2><ul><li><p>想定外の重複</p></li><li><p>マージ</p></li></ul><p> 関数を別のクラスに移動する。</p><p> データを関数から切り離す。3つのクラスから<code>EmployeeData</code>クラスを使うようにする。このクラスは、シンプルなデータ構造を持つだけで、メソッドはひとつも含まれていない。3つのクラスはそれぞれ、特定の機能に必要なソースコードだけを保持。また、他のクラスについて知ることは許可されていない。こうしておけば、想定外の重複は避けられる。</p><h2 id="_3つのクラスはお互い相手のことを知らない" tabindex="-1">3つのクラスはお互い相手のことを知らない <a class="header-anchor" href="#_3つのクラスはお互い相手のことを知らない" aria-label="Permalink to &quot;3つのクラスはお互い相手のことを知らない&quot;">​</a></h2>',10)),(r(),s(p,null,{default:a(()=>[c(o,{id:"mermaid-47",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20PayCalculator%20%7B%0A%20%20%20%20%20%20%20%20%2BcalculatePay()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20HourReporter%20%7B%0A%20%20%20%20%20%20%20%20%2BreportHours()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20EmployeeSaver%20%7B%0A%20%20%20%20%20%20%20%20%2BsaveEmployee()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20EmployeeData%0A%0A%20%20%20%20PayCalculator%20--%3E%20EmployeeData%0A%20%20%20%20HourReporter%20--%3E%20EmployeeData%0A%20%20%20%20EmployeeSaver%20--%3E%20EmployeeData%0A"})]),fallback:a(()=>[...e[0]||(e[0]=[l(" Loading... ",-1)])]),_:1})),e[4]||(e[4]=t("p",null,[l(" この弱点は、3つのクラスをインスタンス化しt、追跡しなければいけない。このジレンマを解決するために一般的に使われるのが、"),t("strong",null,"Facade"),l("パターン。")],-1)),e[5]||(e[5]=t("h2",{id:"facadeパターン",tabindex:"-1"},[l("Facadeパターン "),t("a",{class:"header-anchor",href:"#facadeパターン","aria-label":'Permalink to "Facadeパターン"'},"​")],-1)),(r(),s(p,null,{default:a(()=>[c(o,{id:"mermaid-54",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20EmployeeFacade%20%7B%0A%20%20%20%20%20%20%20%20%2BcalculatePay()%0A%20%20%20%20%20%20%20%20%2BreportHours()%0A%20%20%20%20%20%20%20%20%2Bsave()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PayCalculator%20%7B%0A%20%20%20%20%20%20%20%20%2BcalculatePay()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20HourReporter%20%7B%0A%20%20%20%20%20%20%20%20%2BreportHours()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20EmployeeSaver%20%7B%0A%20%20%20%20%20%20%20%20%2BsaveEmployee()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20EmployeeData%0A%0A%20%20%20%20EmployeeFacade%20--%3E%20PayCalculator%0A%20%20%20%20EmployeeFacade%20--%3E%20HourReporter%0A%20%20%20%20EmployeeFacade%20--%3E%20EmployeeSaver%0A%0A%20%20%20%20PayCalculator%20--%3E%20EmployeeData%0A%20%20%20%20HourReporter%20--%3E%20EmployeeData%0A%20%20%20%20EmployeeSaver%20--%3E%20EmployeeData%0A"})]),fallback:a(()=>[...e[1]||(e[1]=[l(" Loading... ",-1)])]),_:1})),e[6]||(e[6]=A('<p><code>EmployeeFacade</code>に含まれるコードはごくわずか。その責務は、実行したいメソッドを持つクラスのインスタンスを生成して、処理を委譲するだけ。  重要なビジネスルールはデータの近くにおいておきたい場合。その場合、元の<code>Employee</code>クラスに重要なメソッドだけを残し、重要ではないメソッドを呼び出す<strong>Facade</strong>として使えば良い。</p><h2 id="元のemployeeクラスに重要なメソッドだけを残し、重要ではないメソッドのfacadeとして使う" tabindex="-1">元の<code>Employee</code>クラスに重要なメソッドだけを残し、重要ではないメソッドの<strong>Facade</strong>として使う <a class="header-anchor" href="#元のemployeeクラスに重要なメソッドだけを残し、重要ではないメソッドのfacadeとして使う" aria-label="Permalink to &quot;元の`Employee`クラスに重要なメソッドだけを残し、重要ではないメソッドの**Facade**として使う&quot;">​</a></h2>',2)),(r(),s(p,null,{default:a(()=>[c(o,{id:"mermaid-61",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Employee%20%7B%0A%20%20%20%20%20%20%20%20-employeeData%0A%20%20%20%20%20%20%20%20%2BcalculatePay()%0A%20%20%20%20%20%20%20%20%2BreportHours()%0A%20%20%20%20%20%20%20%20%2Bsave()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20HourReporter%20%7B%0A%20%20%20%20%20%20%20%20%2BreportHours()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20EmployeeSaver%20%7B%0A%20%20%20%20%20%20%20%20%2BsaveEmployee()%0A%20%20%20%20%7D%0A%0A%20%20%20%20Employee%20--%3E%20HourReporter%0A%20%20%20%20Employee%20--%3E%20EmployeeSaver%0A"})]),fallback:a(()=>[...e[2]||(e[2]=[l(" Loading... ",-1)])]),_:1}))])}const C=i(n,[["render",u]]);export{f as __pageData,C as default};
