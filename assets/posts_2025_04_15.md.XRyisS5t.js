import{_ as a,c as t,o,a7 as c}from"./chunks/framework.CbZ0TyXs.js";const u=JSON.parse('{"title":"Clean Architecture 2つの価値","description":"Clean Architecture 2つの価値","frontmatter":{"date":"2025-04-15T00:00:00.000Z","title":"Clean Architecture 2つの価値","description":"Clean Architecture 2つの価値","tags":["Clean Architecture"],"prev":{"text":"Prittier","link":"/posts/2025/04/14"},"next":{"text":"Clean Architecture パラダイム","link":"/posts/2025/04/16"}},"headers":[],"relativePath":"posts/2025/04/15.md","filePath":"posts/2025/04/15.md"}'),r={name:"posts/2025/04/15.md"};function l(i,e,d,p,n,s){return o(),t("div",null,[...e[0]||(e[0]=[c('<h1 id="clean-architecture-2つの価値" tabindex="-1">Clean Architecture　2つの価値 <a class="header-anchor" href="#clean-architecture-2つの価値" aria-label="Permalink to &quot;Clean Architecture　2つの価値&quot;">​</a></h1><h2 id="_2つの価値" tabindex="-1">2つの価値 <a class="header-anchor" href="#_2つの価値" aria-label="Permalink to &quot;2つの価値&quot;">​</a></h2><p> すべてのソフトウェアシステムは、ステークホルダーに2つの異なる価値を提供。</p><ul><li><p>振る舞い</p></li><li><p>アーキテクチャ</p></li></ul><p> ソフトウェア開発者は、この2つの価値を維持する責任がある。</p><h2 id="振る舞い" tabindex="-1">振る舞い <a class="header-anchor" href="#振る舞い" aria-label="Permalink to &quot;振る舞い&quot;">​</a></h2><p> プログラマは、マシンがステークホルダーのためにお金を生み出したり節約したりできるように、マシンに振る舞いを与えるために雇用されている。そのためにプログラマは、ステークホルダーが昨日仕様書や用件文書を作成するのを支援する。その後、ステークホルダーのマシンが要件を満たせるように、プログラマはコードを書くことになる。</p><h2 id="アーキテクチャ" tabindex="-1">アーキテクチャ <a class="header-anchor" href="#アーキテクチャ" aria-label="Permalink to &quot;アーキテクチャ&quot;">​</a></h2><p> <code>ソフトウェア</code>という言葉は「<code>ソフト</code>」と「<code>ウェア</code>」の複合語。「<code>ウェア</code>」はプロダクトを意味する。<code>ソフトウェア</code>は「<code>ソフト</code>」になるように考案されたもので、マシンの振る舞いを簡単に変更する手段になることを目的としたもの。ステークホルダーが機能を変更したいと思えば、その変更は簡単でできるようになっておくべき。変更の更新度は、変更の<code>形状</code>ではなく、変更のスコープに比例しなければいけない。</p><h2 id="大きな価値" tabindex="-1">大きな価値 <a class="header-anchor" href="#大きな価値" aria-label="Permalink to &quot;大きな価値&quot;">​</a></h2><p> <code>機能</code>と<code>アーキテクチャ</code>どちらが価値が大きいか？。</p><ul><li><p>完璧に動作するが、変更できないプログラムは、要件が変更されると機能しなくなる。修正することもできず、いずれ役に立たなくなる。</p></li><li><p>動作しないが、変更が簡単なプログラムは、要件が変更されても修正は可能なで、動かし続けることができる。これからも引き続き役に立つ。</p></li></ul><h2 id="アイゼンハワーのマトリックス" tabindex="-1">アイゼンハワーのマトリックス <a class="header-anchor" href="#アイゼンハワーのマトリックス" aria-label="Permalink to &quot;アイゼンハワーのマトリックス&quot;">​</a></h2><p><strong>私には緊急と重要の2種類の問題がある。緊急と重要は違う。</strong><strong>重要なことが緊急になるわけではない。</strong></p><p> この古い格言には真実が数多く含まれている。緊急なことが重要になることはほとんどない。重要なことが緊急になることもほとんどない。</p><ul><li><p>ソフトウェアの1つ目の価値(振る舞い)は緊急だが、常に重要とは限らない。</p></li><li><p>ソフトウェアの2つ目の価値(アーキテクチャ)は重要だが、常に緊急とは限らない。</p></li></ul><p> 緊急かつ重要なものもあるが、緊急でも重要でもないものもある。この4つの組み合わせには、以下の優先順位を付けることが出来る。</p><ol><li>緊急かつ重要</li><li>緊急ではないが重要</li><li>緊急だが重要ではない</li><li>緊急でも重要でもない</li></ol><p> コードのアーキテクチャ(重要)は、<code>1</code>と<code>2</code>、コードの振る舞い(緊急)は<code>1</code>と<code>3</code>に位置する。</p><p> ビジネスマネージャーや開発者がよくやる間違いは、<code>3</code>の項目を<code>1</code>に昇格させること。つまり、「緊急だが重要ではない」ものと「緊急かつ重要」なものを区別できないもの。こうした間違いは、システムの重要ではないことを優先して、システムの重要なアーキテクチャを無視することにつながる。</p><p> ソフトウェア開発者のジレンマは、ビジネスマネージャがアーキテクチャの重要性を評価できないこと。<strong>そのためにソフトウェア開発者雇われている</strong>。したがって、ソフトウェア開発チームには、機能の緊急性よりもアーキテクチャの重要性を強く主張する責任が求められる。</p><h2 id="アーキテクチャの戦い" tabindex="-1">アーキテクチャの戦い <a class="header-anchor" href="#アーキテクチャの戦い" aria-label="Permalink to &quot;アーキテクチャの戦い&quot;">​</a></h2><p> この責任を果たすことは「戦い」に足を踏み入れる事を意味する。</p><ul><li><p>マネジメントチームも、マーケティングチームも、セールスチームも、オペレーションチームも<strong>常に闘争</strong></p></li><li><p><strong>ソフトウェア開発者もステークホルダー</strong>であることは忘れてはいけない。</p></li></ul><p> <code>ソフトウェアアーキテクト</code>は、システムの機能よりも構造にフォーカスするもの。<code>アーキテクト</code>は、機能を簡単に開発・変更・拡張できる<code>アーキテクチャ</code>を構築するもの。</p><p> <code>アーキテクチャ</code>を後回しにすると、システムの開発コストは高くなり、システムの一部または全部が変更不能になる可能性がある。</p>',26)])])}const _=a(r,[["render",l]]);export{u as __pageData,_ as default};
