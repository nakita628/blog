import{_ as d,C as s,c as l,o,a7 as i,b as n,j as a,w as t,a as r,G as p,a8 as m}from"./chunks/framework.CbZ0TyXs.js";const g=JSON.parse('{"title":"Clean Architecture インターフェイス分離の原則","description":"Clean Architecture インターフェイス分離の原則","frontmatter":{"date":"2025-04-26T00:00:00.000Z","title":"Clean Architecture インターフェイス分離の原則","description":"Clean Architecture インターフェイス分離の原則","tags":["Clean Architecture"],"prev":{"text":"Clean Architecture リスコフの置換原則","link":"/posts/2025/04/25"},"next":{"text":"Clean Architecture 依存関係逆転の原則","link":"/posts/2025/04/27"}},"headers":[],"relativePath":"posts/2025/04/26.md","filePath":"posts/2025/04/26.md"}'),u={name:"posts/2025/04/26.md"};function h(C,e,S,A,E,B){const c=s("Mermaid");return o(),l("div",null,[e[1]||(e[1]=i("",11)),(o(),n(m,null,{default:t(()=>[p(c,{id:"mermaid-29",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20S%5B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0S%5D%20--%3E%20F%5B%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFF%5D%20--%3E%20D%5B%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9D%5D%0A"})]),fallback:t(()=>[...e[0]||(e[0]=[r(" Loading... ",-1)])]),_:1})),e[2]||(e[2]=a("p",null," FがDのすべての機能を使っているわけではなく、使っていない機能もある。Sにとって、それらの機能はどうでもいい。だが、Dのそのような部分が更新されると、Fは再デプロイすることになる。それはすなわち、Sも再デプロイしなければいけないということ。Dの一部の機能に障害が発生すると、それがFやSの障害の原因になってしまう可能性がある。",-1)),e[3]||(e[3]=a("h2",{id:"まとめ",tabindex:"-1"},[r("まとめ "),a("a",{class:"header-anchor",href:"#まとめ","aria-label":'Permalink to "まとめ"'},"​")],-1)),e[4]||(e[4]=a("p",null," 必要としないお荷物を抱えたものに依存していると、予期せぬトラブルの元につながる。",-1))])}const _=d(u,[["render",h]]);export{g as __pageData,_ as default};
