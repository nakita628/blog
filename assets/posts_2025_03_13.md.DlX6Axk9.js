import{_ as s,c as n,o as e,a7 as p}from"./chunks/framework.CbZ0TyXs.js";const b=JSON.parse('{"title":"MySQL Basic","description":"MySQL Basic","frontmatter":{"date":"2025-03-13T00:00:00.000Z","title":"MySQL Basic","description":"MySQL Basic","tags":["MySQL"],"prev":{"text":"Docker MySQL","link":"/posts/2025/03/01"},"next":{"text":"MySQL Data Type","link":"/posts/2025/03/03"}},"headers":[],"relativePath":"posts/2025/03/13.md","filePath":"posts/2025/03/13.md"}'),l={name:"posts/2025/03/13.md"};function t(c,a,i,d,o,h){return e(),n("div",null,[...a[0]||(a[0]=[p(`<h1 id="mysql-basic" tabindex="-1">MySQL Basic <a class="header-anchor" href="#mysql-basic" aria-label="Permalink to &quot;MySQL Basic&quot;">​</a></h1><h2 id="mysqlの主なデータベースオブジェクト" tabindex="-1">MySQLの主なデータベースオブジェクト <a class="header-anchor" href="#mysqlの主なデータベースオブジェクト" aria-label="Permalink to &quot;MySQLの主なデータベースオブジェクト&quot;">​</a></h2><table tabindex="0"><thead><tr><th>オブジェクトの種類</th><th>キーワード(オブジェクト種類名)</th></tr></thead><tbody><tr><td>データベース(スキーマ)</td><td>DATABASE</td></tr><tr><td>テーブル</td><td>TABLE</td></tr><tr><td>インデックス</td><td>INDEX</td></tr><tr><td>ビュー</td><td>VIEW</td></tr><tr><td>トリガ</td><td>TRIGGER</td></tr><tr><td>ストアドファンクション</td><td>FUNCTION</td></tr><tr><td>ストアドプロシージャ</td><td>PROCEDURE</td></tr><tr><td>イベント</td><td>EVENT</td></tr><tr><td>空間情報</td><td>SPATIAL REFERENCE SYSTEM</td></tr><tr><td>テーブルスペース</td><td>TABLE SPACE</td></tr><tr><td>ログファイル・グループ</td><td>LOGFILE GROUP</td></tr><tr><td>サーバー</td><td>SERVER</td></tr></tbody></table><h2 id="基本構文" tabindex="-1">基本構文 <a class="header-anchor" href="#基本構文" aria-label="Permalink to &quot;基本構文&quot;">​</a></h2><h2 id="生成" tabindex="-1">生成 <a class="header-anchor" href="#生成" aria-label="Permalink to &quot;生成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE オブジェクト種類名 オブジェクト名 オブジェクトに応じた各種情報;</span></span></code></pre></div><h2 id="破棄" tabindex="-1">破棄 <a class="header-anchor" href="#破棄" aria-label="Permalink to &quot;破棄&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP オブジェクト種類名 オブジェクト名;</span></span></code></pre></div><h2 id="変更" tabindex="-1">変更 <a class="header-anchor" href="#変更" aria-label="Permalink to &quot;変更&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER オブジェクト種類名 オブジェクト名 オブジェクトに応じた各種情報;</span></span></code></pre></div><h2 id="データーベースの作成-削除-変更" tabindex="-1">データーベースの作成 削除 変更 <a class="header-anchor" href="#データーベースの作成-削除-変更" aria-label="Permalink to &quot;データーベースの作成 削除 変更&quot;">​</a></h2><p> データベースを作成するには<code>CREATE DATABASE</code>文を使用する。MySQLでは「データベース」という言葉は「スキーマ」と同じ意味で使用される。</p><p><code>CREATE DATABASE</code>は<code>CREATE SCHEMA</code>と同じ意味。(「SCHEMA」が「DATABASE」の別名。)</p><p> <code>CREATE DATABASE</code>文は、通常、作成しようとしているデータベースメイト同じ名前のものが存在する場合エラーになる。<code>IF NOT EXISTS</code>をつけると、既存の場合にはエラーではなく、何もせずに終了するようになる。</p><h2 id="create-databaseの構文" tabindex="-1"><code>CREATE DATABASE</code>の構文 <a class="header-anchor" href="#create-databaseの構文" aria-label="Permalink to &quot;\`CREATE DATABASE\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE DATABASE [IF NOT EXISTS] db_name</span></span>
<span class="line"><span>    [DEFAULT CHARACTER SET = charset_name]</span></span>
<span class="line"><span>    [DEFAULT COLLATE SET = collation_name]</span></span>
<span class="line"><span>    [DEFAULT ENCRYPTION] = &#39;Y&#39;/&#39;N&#39;</span></span></code></pre></div><p> データベースを削除するには<code>DROP DATABASE</code>文を使用する。<code>IF EXISTS</code>を付ければ、対象のデータベースが存在しない場合でもエラーにならない。</p><h2 id="drop-databaseの構文" tabindex="-1"><code>DROP DATABASE</code>の構文 <a class="header-anchor" href="#drop-databaseの構文" aria-label="Permalink to &quot;\`DROP DATABASE\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP DATABASE [IF EXISTS] db_name</span></span></code></pre></div><p> <code>ALTER DATABASE</code>で既存データベースのデフォルト指定内容を変更できる。データベースの名前は変更できない。</p><h2 id="alter-databaseの構文" tabindex="-1"><code>ALTER DATABASE</code>の構文 <a class="header-anchor" href="#alter-databaseの構文" aria-label="Permalink to &quot;\`ALTER DATABASE\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER DATABASE db_name</span></span>
<span class="line"><span>    [DEFAULT CHARCTER SEC = charset_name]</span></span>
<span class="line"><span>    [DEFAULT COLLATE SET = collation_name]</span></span>
<span class="line"><span>    [DEFAULT ENCRYPTION] = &#39;Y&#39;/&#39;N&#39;</span></span></code></pre></div><h2 id="テーブルの作成-削除-変更" tabindex="-1">テーブルの作成 削除 変更 <a class="header-anchor" href="#テーブルの作成-削除-変更" aria-label="Permalink to &quot;テーブルの作成 削除 変更&quot;">​</a></h2><p> テーブルを作成するには<code>CREATE TABLE</code>文を使用する。テーブルはデータベース(スキーマ)の中に作成する。テーブル名は設定により大文字小文字が区別されることがある。使用するスキーマ(デフォルトスキーマ)を指定するには、「USE db_name」とする。</p><h2 id="create-tableの構文" tabindex="-1"><code>CREATE TABLE</code>の構文 <a class="header-anchor" href="#create-tableの構文" aria-label="Permalink to &quot;\`CREATE TABLE\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name (</span></span>
<span class="line"><span>    列1の情報,</span></span>
<span class="line"><span>    列2の情報,</span></span>
<span class="line"><span>    .</span></span>
<span class="line"><span>    .</span></span>
<span class="line"><span>    インデックスに関する情報</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>[DEAULT CHARACTER SET = charset_name]</span></span>
<span class="line"><span>[DEAULT COLLATE = collation_name]</span></span>
<span class="line"><span>[ENGINE = engine_name]</span></span>
<span class="line"><span>[COMMENT = comment_string]</span></span></code></pre></div><ul><li><code>DEFAULT CHARACTER SET</code> テーブルの文字コード</li><li><code>DEFAULT COLLATE</code> コレーション</li><li><code>ENGINE</code> 使用したいストレージエンジン</li></ul><p> 指定しない場合は、データベースのデフォルト、それもない場合は動作中の<code>MySQL</code>サーバーのデフォルトでの動作になる。</p><p> 「列 n の情報」の部分は、列に関する情報を記述。<code>,</code>で区切られた1つかたまりが1つの列を表し、それを必要な列数だけ羅列する。1つの列の情報は次のような項目を指定できる。</p><h2 id="列の情報-部分の構文" tabindex="-1">列の情報　部分の構文 <a class="header-anchor" href="#列の情報-部分の構文" aria-label="Permalink to &quot;列の情報　部分の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>col_name data_type</span></span>
<span class="line"><span>[NOT NULL]</span></span>
<span class="line"><span>[DEFAULT default_value]</span></span>
<span class="line"><span>[AUTO_INCREMENT]</span></span>
<span class="line"><span>[UNIQUE]</span></span>
<span class="line"><span>[PRIMARY KEY]</span></span>
<span class="line"><span>[COMMENT comment_string]</span></span></code></pre></div><h2 id="not-null" tabindex="-1">NOT_NULL <a class="header-anchor" href="#not-null" aria-label="Permalink to &quot;NOT_NULL&quot;">​</a></h2><p> カラムに<code>NULL</code>を許さない。基本的には特別に<code>NULL</code>を許可したいカラム以外の全カラムに<code>NOT NULL</code>を指定すべき。</p><h2 id="default" tabindex="-1">DEFAULT <a class="header-anchor" href="#default" aria-label="Permalink to &quot;DEFAULT&quot;">​</a></h2><p> <code>INSERT</code>文でカラムに入れる値が記述されなかったときのデフォルトの値を指定する。</p><h2 id="auto-increment" tabindex="-1">AUTO_INCREMENT <a class="header-anchor" href="#auto-increment" aria-label="Permalink to &quot;AUTO_INCREMENT&quot;">​</a></h2><p> テーブルに行が追加されるたびに自動的にインクリメントされた値がセットされる列であることを指示するオプション。1つのテーブルに1列丈指定可能。<code>AUTO_INCREMENT</code>を指定する列の型は整数型である必要がある。</p><h2 id="unique" tabindex="-1">UNIQUE <a class="header-anchor" href="#unique" aria-label="Permalink to &quot;UNIQUE&quot;">​</a></h2><p> この列へ入る値に重複を許さない。</p><h2 id="primary-key" tabindex="-1">PRIMARY KEY <a class="header-anchor" href="#primary-key" aria-label="Permalink to &quot;PRIMARY KEY&quot;">​</a></h2><p> この列が主キーであることを指定。複合キーの場合は此の方法ではなく、列を網羅する最後の「インデックスに関する情報」の部分に、次のように記述。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PRIMARY KEY (col1, col2)</span></span></code></pre></div><h2 id="create-table例" tabindex="-1"><code>CREATE TABLE</code>例 <a class="header-anchor" href="#create-table例" aria-label="Permalink to &quot;\`CREATE TABLE\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE SAMPLE_INFO (</span></span>
<span class="line"><span>    id INTEGER PRIMARY KEY,</span></span>
<span class="line"><span>    name VARCHAR(100) NOT NULL,</span></span>
<span class="line"><span>    birth DATETIME,</span></span>
<span class="line"><span>    comment VARCHAR(200)</span></span>
<span class="line"><span>)   ENGINE=InnoDB;</span></span></code></pre></div><h2 id="テーブル定義の確認" tabindex="-1">テーブル定義の確認 <a class="header-anchor" href="#テーブル定義の確認" aria-label="Permalink to &quot;テーブル定義の確認&quot;">​</a></h2><p> <code>desc</code>または、<code>describe</code>で確認できる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; desc SAMPLE_INFO;</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>| Field   | Type         | Null | Key | Default | Extra |</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>| id      | int          | NO   | PRI | NULL    |       |</span></span>
<span class="line"><span>| name    | varchar(100) | NO   |     | NULL    |       |</span></span>
<span class="line"><span>| birth   | datetime     | YES  |     | NULL    |       |</span></span>
<span class="line"><span>| comment | varchar(200) | YES  |     | NULL    |       |</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>4 rows in set (0.01 sec)</span></span></code></pre></div><h2 id="drop-table構文" tabindex="-1"><code>DROP TABLE</code>構文 <a class="header-anchor" href="#drop-table構文" aria-label="Permalink to &quot;\`DROP TABLE\`構文&quot;">​</a></h2><p> 既存のテーブルを削除する<code>DROP TABLE</code>文。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE [IF EXISTS] tbl_name</span></span></code></pre></div><h2 id="既存のテーブル定義の変更" tabindex="-1">既存のテーブル定義の変更 <a class="header-anchor" href="#既存のテーブル定義の変更" aria-label="Permalink to &quot;既存のテーブル定義の変更&quot;">​</a></h2><p> <code>ALTER TABLE</code>文を使用すると、既存テーブルの定義を変更できる。先程作成したテーブルを変更してみる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER TABLE SAMPLE_INFO</span></span>
<span class="line"><span>    ADD COLUMN yomi VARCHAR(100) NOT NULL AFTER name;</span></span></code></pre></div><p> <code>yomi</code>カラムが追加された。既存のテーブルの任意の位置にカラムを追加できるのは、<code>MySQL</code>の特徴のひとつ。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; desc SAMPLE_INFO;</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>| Field   | Type         | Null | Key | Default | Extra |</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>| id      | int          | NO   | PRI | NULL    |       |</span></span>
<span class="line"><span>| name    | varchar(100) | NO   |     | NULL    |       |</span></span>
<span class="line"><span>| yomi    | varchar(100) | NO   |     | NULL    |       |</span></span>
<span class="line"><span>| birth   | datetime     | YES  |     | NULL    |       |</span></span>
<span class="line"><span>| comment | varchar(200) | YES  |     | NULL    |       |</span></span>
<span class="line"><span>+---------+--------------+------+-----+---------+-------+</span></span>
<span class="line"><span>5 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="インデックスの作成" tabindex="-1">インデックスの作成 <a class="header-anchor" href="#インデックスの作成" aria-label="Permalink to &quot;インデックスの作成&quot;">​</a></h2><p> テーブルのカラムに対して<code>インデックス</code>を作成すると、そのカラムに対する検索を高速化できる。<code>インデックス</code>はテーブル作成時に指定することも可能だが、既存テーブルに対して新たな<code>インデックス</code>を作成することも可能。<code>インデックス</code>を作るには<code>CREATE INDEX</code>文を使用する。</p><h2 id="最低限必要なもの" tabindex="-1">最低限必要なもの <a class="header-anchor" href="#最低限必要なもの" aria-label="Permalink to &quot;最低限必要なもの&quot;">​</a></h2><ul><li><code>インデックス</code>を張るテーブルとそのカラム名(複数の場合もある)</li><li>張った<code>インデックス</code>につける名前</li></ul><h2 id="create-indexの構文" tabindex="-1"><code>CREATE INDEX</code>の構文 <a class="header-anchor" href="#create-indexの構文" aria-label="Permalink to &quot;\`CREATE INDEX\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX ind_name</span></span>
<span class="line"><span>       [USING BTREE/HASH]</span></span>
<span class="line"><span>    ON tbl_name (col1_name, col2_name....)</span></span>
<span class="line"><span>       [COMMENT comment_string]</span></span></code></pre></div><h2 id="最小限の指定でインデックスを作成する例" tabindex="-1">最小限の指定でインデックスを作成する例 <a class="header-anchor" href="#最小限の指定でインデックスを作成する例" aria-label="Permalink to &quot;最小限の指定でインデックスを作成する例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE INDEX idx01 ON mytable (name1, name2);</span></span></code></pre></div><h2 id="インデックスの削除" tabindex="-1">インデックスの削除 <a class="header-anchor" href="#インデックスの削除" aria-label="Permalink to &quot;インデックスの削除&quot;">​</a></h2><p> <code>インデックス</code>を削除するには、<code>DROP INDEX</code>を使用する。<code>DROP INDEX</code>には<code>[IF EXISTS]</code>のオプションの指定はない。</p><h2 id="drop-indexの構文" tabindex="-1"><code>DROP INDEX</code>の構文 <a class="header-anchor" href="#drop-indexの構文" aria-label="Permalink to &quot;\`DROP INDEX\`の構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP INDEX ind_name on tbl_name</span></span></code></pre></div><h2 id="インデックスの変更" tabindex="-1">インデックスの変更 <a class="header-anchor" href="#インデックスの変更" aria-label="Permalink to &quot;インデックスの変更&quot;">​</a></h2><p> <code>インデックス</code>の変更を行いたい場合は、既存の<code>インデックス</code>を<code>DROP</code>してから新たに<code>CREATE</code>する。インデックスの扱いには、<code>ALTER</code>文はない。</p><h2 id="ストアドルーチンの作成" tabindex="-1">ストアドルーチンの作成 <a class="header-anchor" href="#ストアドルーチンの作成" aria-label="Permalink to &quot;ストアドルーチンの作成&quot;">​</a></h2><p> <code>ストアドプロシージャ</code>と<code>ストアドファンクション</code>は総称して<code>ストアドルーチン</code>と呼ばれる。どちらも記述された一連の処理を行う点は同様。</p><h2 id="ストアドプロシージャ" tabindex="-1">ストアドプロシージャ <a class="header-anchor" href="#ストアドプロシージャ" aria-label="Permalink to &quot;ストアドプロシージャ&quot;">​</a></h2><p> <code>ストアドプロシージャ</code>を作成するには、<code>CREATE PROCEDURE</code>文を使用する。戻り値を返さない。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE PROCEDURE procedure_name</span></span>
<span class="line"><span>    ([IN/OUT/INOUT] param1_name data_type, ...)</span></span>
<span class="line"><span>    [COMMENT comment_str]</span></span>
<span class="line"><span>    [DETERAMISTIC]</span></span>
<span class="line"><span>  routine_body</span></span></code></pre></div><h2 id="ストアドファンクション" tabindex="-1">ストアドファンクション <a class="header-anchor" href="#ストアドファンクション" aria-label="Permalink to &quot;ストアドファンクション&quot;">​</a></h2><p> <code>ストアドファンクション</code>を作成するには、<code>CREATE FUNCTION</code>文を使用する。実行結果として1つの値を戻り値として呼び出し元に返す。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION function_name</span></span>
<span class="line"><span>    (param1_name data_type, ...)</span></span>
<span class="line"><span>    RETURNS data_type</span></span>
<span class="line"><span>    [COMMENT comment_str]</span></span>
<span class="line"><span>    [DETERMSTIC]</span></span>
<span class="line"><span>  routine_body</span></span></code></pre></div><p> <code>ストアドルーチン</code>は、複数の<code>SQL</code>処理を実施する。<code>CREATE</code>文で定義を記述する際に、途中に命令の終了を示す「<code>;</code>」が入る。この記号があると<code>mysql</code>コマンドラインクライアントは内容を<code>MySQL</code>サーバーに創出し、実行を試みる。そのため、<code>ストアドルーチン</code>内に出てくる「;」命令の終了とみなされないようにするために、<code>ストアドルーチン</code>作成前に一時的に終端文字の変更を行う。</p><h2 id="delimiter文" tabindex="-1"><code>delimiter</code>文 <a class="header-anchor" href="#delimiter文" aria-label="Permalink to &quot;\`delimiter\`文&quot;">​</a></h2><p> <code>CREATE FUNCTION</code>の前に一時的に終端文字を「<code>//</code>」に変更し、ファンクショ生成終了を、その「<code>//</code>」で伝えたあと、再び<code>delimiter</code>文で元の終端文字に戻している。</p><h4 id="ストアドファンクションの例" tabindex="-1"><code>ストアドファンクション</code>の例 <a class="header-anchor" href="#ストアドファンクションの例" aria-label="Permalink to &quot;\`ストアドファンクション\`の例&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>delimiter //</span></span>
<span class="line"><span>CREATE FUNCTION dfb2deg(d FLOAT, f FLOAT, b FLOAT)</span></span>
<span class="line"><span>    RETURNS FLOAT DETERMINISTIC</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    RETURN d + f/60 + b/60/60;</span></span>
<span class="line"><span>END</span></span>
<span class="line"><span>//</span></span>
<span class="line"><span>delimiter</span></span></code></pre></div><h2 id="select" tabindex="-1">SELECT <a class="header-anchor" href="#select" aria-label="Permalink to &quot;SELECT&quot;">​</a></h2><h2 id="select文" tabindex="-1"><code>SELECT</code>文 <a class="header-anchor" href="#select文" aria-label="Permalink to &quot;\`SELECT\`文&quot;">​</a></h2><p> テーブルに登録されているデータを取り出すには<code>SELECT</code>文を使用する。<code>FROM</code>句には別のテーブルとの結合を表す<code>JOIN</code>を記述することも可能。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT カラム名を羅列</span></span>
<span class="line"><span>    FROM テーブル名1</span></span>
<span class="line"><span>         .</span></span>
<span class="line"><span>         .</span></span>
<span class="line"><span>    WHERE 検索条件</span></span>
<span class="line"><span>    GROUP BY カラム名を羅列</span></span>
<span class="line"><span>    HAVING カラム名を羅列</span></span>
<span class="line"><span>    ORDER BY カラム名を羅列 [ASC/DESC]</span></span>
<span class="line"><span>    LIMIT 取得件数</span></span></code></pre></div><h2 id="select文実行するための準備" tabindex="-1"><code>SELECT</code>文実行するための準備 <a class="header-anchor" href="#select文実行するための準備" aria-label="Permalink to &quot;\`SELECT\`文実行するための準備&quot;">​</a></h2><h2 id="mytableを作成" tabindex="-1"><code>mytable</code>を作成 <a class="header-anchor" href="#mytableを作成" aria-label="Permalink to &quot;\`mytable\`を作成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    name VARCHAR(255),</span></span>
<span class="line"><span>    val VARCHAR(255),</span></span>
<span class="line"><span>    col1 INT,</span></span>
<span class="line"><span>    col2 INT,</span></span>
<span class="line"><span>    col3 INT</span></span>
<span class="line"><span>);</span></span></code></pre></div><h2 id="mytableにデータを挿入" tabindex="-1"><code>mytable</code>にデータを挿入 <a class="header-anchor" href="#mytableにデータを挿入" aria-label="Permalink to &quot;\`mytable\`にデータを挿入&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable (id, name, val, col1, col2, col3)</span></span>
<span class="line"><span>VALUES</span></span>
<span class="line"><span>    (1, &#39;name A&#39;, &#39;val A&#39;, 111, 11, 1),</span></span>
<span class="line"><span>    (2, &#39;name B&#39;, &#39;val B&#39;, 222, 22, 2),</span></span>
<span class="line"><span>    (3, &#39;name C&#39;, &#39;val C&#39;, 333, 33, 3),</span></span>
<span class="line"><span>    (4, &#39;name D&#39;, &#39;val D&#39;, 444, 44, 4),</span></span>
<span class="line"><span>    (5, &#39;name E&#39;, &#39;val E&#39;, 555, 55, 5);</span></span></code></pre></div><h2 id="othertableを作成" tabindex="-1"><code>othertable</code>を作成 <a class="header-anchor" href="#othertableを作成" aria-label="Permalink to &quot;\`othertable\`を作成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE othertable (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    name VARCHAR(255)</span></span>
<span class="line"><span>);</span></span></code></pre></div><h2 id="othertableにデータを挿入" tabindex="-1"><code>othertable</code>にデータを挿入 <a class="header-anchor" href="#othertableにデータを挿入" aria-label="Permalink to &quot;\`othertable\`にデータを挿入&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO othertable (id, name)</span></span>
<span class="line"><span>VALUES</span></span>
<span class="line"><span>    (1, &#39;Item A&#39;),</span></span>
<span class="line"><span>    (2, &#39;Item B&#39;),</span></span>
<span class="line"><span>    (3, &#39;Item C&#39;),</span></span>
<span class="line"><span>    (4, &#39;Item D&#39;);</span></span></code></pre></div><h2 id="select例" tabindex="-1"><code>SELECT</code>例 <a class="header-anchor" href="#select例" aria-label="Permalink to &quot;\`SELECT\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT m.col1, MAX(m.col2), MAX(o.id), MAX(o.name)</span></span>
<span class="line"><span>    FROM mytable m</span></span>
<span class="line"><span>         RIGHT OUTER JOIN othertable o ON (m.col3 = o.id)</span></span>
<span class="line"><span>         WHERE col1 IN (111, 222, 333)</span></span>
<span class="line"><span>         GROUP BY m.col1</span></span>
<span class="line"><span>         ORDER BY m.col1</span></span>
<span class="line"><span>         LIMIT 50;</span></span></code></pre></div><h2 id="実行結果" tabindex="-1">実行結果 <a class="header-anchor" href="#実行結果" aria-label="Permalink to &quot;実行結果&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+------+-------------+-----------+-------------+</span></span>
<span class="line"><span>| col1 | MAX(m.col2) | MAX(o.id) | MAX(o.name) |</span></span>
<span class="line"><span>+------+-------------+-----------+-------------+</span></span>
<span class="line"><span>|  111 |          11 |         1 | Item A      |</span></span>
<span class="line"><span>|  222 |          22 |         2 | Item B      |</span></span>
<span class="line"><span>|  333 |          33 |         3 | Item C      |</span></span>
<span class="line"><span>+------+-------------+-----------+-------------+</span></span>
<span class="line"><span>3 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="検索結果をファイルに出力" tabindex="-1">検索結果をファイルに出力 <a class="header-anchor" href="#検索結果をファイルに出力" aria-label="Permalink to &quot;検索結果をファイルに出力&quot;">​</a></h2><p><code>SELECT 〜 INTO OUTFILE</code>の仕様にはFILE権限が必要。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT id, name, val INTO OUTFILE &#39;myoutfile.txt&#39; FROM mytable;</span></span></code></pre></div><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU9ILyZ8J4bLACb8LIWko2_X0lEICukISrAvk5BpIZ9BAXMKSYjB4fDoKfKKghaK5BGoKnIi53pzGe1iNLqWaPUOcmeK2NCCSlPm3D8mCZNL18gM9UPW2YRdvnZ2DGCvHiWSOoYd5c5nFj1THQJQNSlba9gN0lGT0000" alt="uml diagram"><h2 id="insert" tabindex="-1">INSERT <a class="header-anchor" href="#insert" aria-label="Permalink to &quot;INSERT&quot;">​</a></h2><h2 id="insert文" tabindex="-1"><code>INSERT</code>文 <a class="header-anchor" href="#insert文" aria-label="Permalink to &quot;\`INSERT\`文&quot;">​</a></h2><p> テーブルに対して新たな1件のデータを追加するには、<code>INSERT</code>文を使用する。</p><h2 id="insert構文" tabindex="-1"><code>INSERT</code>構文 <a class="header-anchor" href="#insert構文" aria-label="Permalink to &quot;\`INSERT\`構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO テーブル名 ( カラム名を羅列 )</span></span>
<span class="line"><span>     VALUES ( 各カラムに対応する値を羅列 )</span></span></code></pre></div><h2 id="insert文を実行するための準備" tabindex="-1"><code>INSERT</code>文を実行するための準備 <a class="header-anchor" href="#insert文を実行するための準備" aria-label="Permalink to &quot;\`INSERT\`文を実行するための準備&quot;">​</a></h2><h2 id="mytableを作成-1" tabindex="-1"><code>mytable</code>を作成 <a class="header-anchor" href="#mytableを作成-1" aria-label="Permalink to &quot;\`mytable\`を作成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    name VARCHAR(255)</span></span>
<span class="line"><span>);</span></span></code></pre></div><h2 id="insert例" tabindex="-1"><code>INSERT</code>例 <a class="header-anchor" href="#insert例" aria-label="Permalink to &quot;\`INSERT\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable (id, name) VALUES(13, &#39;yamada&#39;);</span></span></code></pre></div><h2 id="select文で取り出す" tabindex="-1"><code>SELECT</code>文で取り出す <a class="header-anchor" href="#select文で取り出す" aria-label="Permalink to &quot;\`SELECT\`文で取り出す&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM mytable;</span></span></code></pre></div><h2 id="実行結果-1" tabindex="-1">実行結果 <a class="header-anchor" href="#実行結果-1" aria-label="Permalink to &quot;実行結果&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT * FROM mytable;</span></span>
<span class="line"><span>+------+--------+</span></span>
<span class="line"><span>| id   | name   |</span></span>
<span class="line"><span>+------+--------+</span></span>
<span class="line"><span>|   13 | yamada |</span></span>
<span class="line"><span>+------+--------+</span></span>
<span class="line"><span>1 row in set (0.01 sec)</span></span></code></pre></div><h2 id="replace文" tabindex="-1"><code>REPLACE</code>文 <a class="header-anchor" href="#replace文" aria-label="Permalink to &quot;\`REPLACE\`文&quot;">​</a></h2><p> <code>INRSERT</code>とにた動作をする命令として、<code>REPLACE</code>文がある。<code>REPLACE</code>文の構文は、ほぼ<code>INSERT</code>文。通常、<code>INSERT</code>文はプライマリーキーの値(またはユニークキーの値)が既存のものを追加しようとするとエラーが発生する。しかし、<code>REPLACE</code>文を使えば、既存の行を削除して新たに行を追加することが可能になる。プライマリーキーの値(またはユニークキーの値)が一致する行がなければ、動作は<code>INSERT</code>文と全く同じになる。</p><h2 id="replace例" tabindex="-1"><code>REPLACE</code>例 <a class="header-anchor" href="#replace例" aria-label="Permalink to &quot;\`REPLACE\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REPLACE INTO mytable (id, name) VALUES(13, &#39;yamada&#39;);</span></span></code></pre></div><h2 id="update" tabindex="-1">UPDATE <a class="header-anchor" href="#update" aria-label="Permalink to &quot;UPDATE&quot;">​</a></h2><h2 id="update文" tabindex="-1"><code>UPDATE</code>文 <a class="header-anchor" href="#update文" aria-label="Permalink to &quot;\`UPDATE\`文&quot;">​</a></h2><p> テーブルにすでに存在するデータを更新(変更)するには、<code>UPDATE</code>文を使用する。<code>UPDATE</code>文は、<code>WHERE</code>句で指定した検索条件にマッチした行の指定カラムの値が変更される。<code>WHERE</code>をつけない場合はテーブル全件の指定カラムの値が変更される。</p><h2 id="update構文" tabindex="-1"><code>UPDATE</code>構文 <a class="header-anchor" href="#update構文" aria-label="Permalink to &quot;\`UPDATE\`構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UPDATE テーブル名</span></span>
<span class="line"><span>   SET カラム名1=値1, カラム名2=値2, ....</span></span>
<span class="line"><span> WHERE 検索条件</span></span></code></pre></div><h2 id="update文を実行するための準備" tabindex="-1"><code>UPDATE</code>文を実行するための準備 <a class="header-anchor" href="#update文を実行するための準備" aria-label="Permalink to &quot;\`UPDATE\`文を実行するための準備&quot;">​</a></h2><h2 id="mytableを作成-2" tabindex="-1"><code>mytable</code>を作成 <a class="header-anchor" href="#mytableを作成-2" aria-label="Permalink to &quot;\`mytable\`を作成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    val VARCHAR(255),</span></span>
<span class="line"><span>    name VARCHAR(255),</span></span>
<span class="line"><span>    col1 VARCHAR(255),</span></span>
<span class="line"><span>    col2 VARCHAR(255),</span></span>
<span class="line"><span>    col3 VARCHAR(255)</span></span>
<span class="line"><span>);</span></span></code></pre></div><h2 id="mytableにデータを挿入-1" tabindex="-1"><code>mytable</code>にデータを挿入 <a class="header-anchor" href="#mytableにデータを挿入-1" aria-label="Permalink to &quot;\`mytable\`にデータを挿入&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable (id, name, val, col1, col2, col3)</span></span>
<span class="line"><span>VALUES</span></span>
<span class="line"><span>    (1, &#39;name A&#39;, &#39;val A&#39;, 111, 11, 1),</span></span>
<span class="line"><span>    (2, &#39;name B&#39;, &#39;val B&#39;, 222, 22, 2),</span></span>
<span class="line"><span>    (3, &#39;name C&#39;, &#39;val C&#39;, 333, 33, 3),</span></span>
<span class="line"><span>    (4, &#39;name D&#39;, &#39;val D&#39;, 444, 44, 4),</span></span>
<span class="line"><span>    (5, &#39;name E&#39;, &#39;val E&#39;, 555, 55, 5);</span></span></code></pre></div><h2 id="update例" tabindex="-1"><code>UPDATE</code>例 <a class="header-anchor" href="#update例" aria-label="Permalink to &quot;\`UPDATE\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UPDATE mytable</span></span>
<span class="line"><span>    SET name=&#39;change_tarou&#39;, val=&#39;val change&#39;, col1=&#39;change1&#39;, col2=&#39;change2&#39;, col3=&#39;change3&#39;</span></span>
<span class="line"><span>   WHERE id=3;</span></span></code></pre></div><h2 id="update前との比較" tabindex="-1"><code>UPDATE</code>前との比較 <a class="header-anchor" href="#update前との比較" aria-label="Permalink to &quot;\`UPDATE\`前との比較&quot;">​</a></h2><p> <code>id=3</code>のカラムの値の更新されていることがわかる。</p><h2 id="update前" tabindex="-1"><code>UPDATE</code>前 <a class="header-anchor" href="#update前" aria-label="Permalink to &quot;\`UPDATE\`前&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT * FROM mytable;</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>| id   | val   | name   | col1 | col2 | col3 |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>|    1 | val A | name A | 111  | 11   | 1    |</span></span>
<span class="line"><span>|    2 | val B | name B | 222  | 22   | 2    |</span></span>
<span class="line"><span>|    3 | val C | name C | 333  | 33   | 3    |</span></span>
<span class="line"><span>|    4 | val D | name D | 444  | 44   | 4    |</span></span>
<span class="line"><span>|    5 | val E | name E | 555  | 55   | 5    |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>5 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="update後" tabindex="-1"><code>UPDATE</code>後 <a class="header-anchor" href="#update後" aria-label="Permalink to &quot;\`UPDATE\`後&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+------+------------+--------------+---------+---------+---------+</span></span>
<span class="line"><span>| id   | val        | name         | col1    | col2    | col3    |</span></span>
<span class="line"><span>+------+------------+--------------+---------+---------+---------+</span></span>
<span class="line"><span>|    1 | val A      | name A       | 111     | 11      | 1       |</span></span>
<span class="line"><span>|    2 | val B      | name B       | 222     | 22      | 2       |</span></span>
<span class="line"><span>|    3 | val change | change_tarou | change1 | change2 | change3 |</span></span>
<span class="line"><span>|    4 | val D      | name D       | 444     | 44      | 4       |</span></span>
<span class="line"><span>|    5 | val E      | name E       | 555     | 55      | 5       |</span></span>
<span class="line"><span>+------+------------+--------------+---------+---------+---------+</span></span>
<span class="line"><span>5 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="delete-truncate" tabindex="-1">DELETE TRUNCATE <a class="header-anchor" href="#delete-truncate" aria-label="Permalink to &quot;DELETE TRUNCATE&quot;">​</a></h2><h2 id="delete文" tabindex="-1"><code>DELETE</code>文 <a class="header-anchor" href="#delete文" aria-label="Permalink to &quot;\`DELETE\`文&quot;">​</a></h2><p> テーブルに存在するデータから行を削除するには、<code>DELETE</code>文を使用する。<code>WHERE</code>句で指定した検索にマッチする行が削除される。<code>WHERE</code>句を指定しなかった場合はテーブルの全件が削除される。</p><h2 id="delete構文" tabindex="-1"><code>DELETE</code>構文 <a class="header-anchor" href="#delete構文" aria-label="Permalink to &quot;\`DELETE\`構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELETE FROM テーブル名</span></span>
<span class="line"><span>　WHERE 検索条件</span></span></code></pre></div><h2 id="delete文を実行するための準備" tabindex="-1"><code>DELETE</code>文を実行するための準備 <a class="header-anchor" href="#delete文を実行するための準備" aria-label="Permalink to &quot;\`DELETE\`文を実行するための準備&quot;">​</a></h2><h2 id="mytableを作成-3" tabindex="-1"><code>mytable</code>を作成 <a class="header-anchor" href="#mytableを作成-3" aria-label="Permalink to &quot;\`mytable\`を作成&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    val VARCHAR(255),</span></span>
<span class="line"><span>    name VARCHAR(255),</span></span>
<span class="line"><span>    col1 VARCHAR(255),</span></span>
<span class="line"><span>    col2 VARCHAR(255),</span></span>
<span class="line"><span>    col3 VARCHAR(255)</span></span>
<span class="line"><span>);</span></span></code></pre></div><h2 id="mytableにデータを挿入-2" tabindex="-1"><code>mytable</code>にデータを挿入 <a class="header-anchor" href="#mytableにデータを挿入-2" aria-label="Permalink to &quot;\`mytable\`にデータを挿入&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable (id, name, val, col1, col2, col3)</span></span>
<span class="line"><span>VALUES</span></span>
<span class="line"><span>    (1, &#39;name A&#39;, &#39;val A&#39;, 111, 11, 1),</span></span>
<span class="line"><span>    (2, &#39;name B&#39;, &#39;val B&#39;, 222, 22, 2),</span></span>
<span class="line"><span>    (3, &#39;name C&#39;, &#39;val C&#39;, 333, 33, 3),</span></span>
<span class="line"><span>    (4, &#39;name D&#39;, &#39;val D&#39;, 444, 44, 4),</span></span>
<span class="line"><span>    (5, &#39;name E&#39;, &#39;val E&#39;, 555, 55, 5);</span></span></code></pre></div><h2 id="delete例" tabindex="-1"><code>DELETE</code>例 <a class="header-anchor" href="#delete例" aria-label="Permalink to &quot;\`DELETE\`例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELETE FROM mytable</span></span>
<span class="line"><span>  WHERE col1=111;</span></span></code></pre></div><h2 id="delete前との比較" tabindex="-1"><code>DELETE</code>前との比較 <a class="header-anchor" href="#delete前との比較" aria-label="Permalink to &quot;\`DELETE\`前との比較&quot;">​</a></h2><p> <code>WHERE col1=111</code>のカラムが削除されたことがわかる。 <code>DELETE</code>前</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT * FROM mytable;</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>| id   | val   | name   | col1 | col2 | col3 |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>|    1 | val A | name A | 111  | 11   | 1    |</span></span>
<span class="line"><span>|    2 | val B | name B | 222  | 22   | 2    |</span></span>
<span class="line"><span>|    3 | val C | name C | 333  | 33   | 3    |</span></span>
<span class="line"><span>|    4 | val D | name D | 444  | 44   | 4    |</span></span>
<span class="line"><span>|    5 | val E | name E | 555  | 55   | 5    |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>5 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="delete後" tabindex="-1"><code>DELETE</code>後 <a class="header-anchor" href="#delete後" aria-label="Permalink to &quot;\`DELETE\`後&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ysql&gt; SELECT * FROM mytable;</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>| id   | val   | name   | col1 | col2 | col3 |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>|    2 | val B | name B | 222  | 22   | 2    |</span></span>
<span class="line"><span>|    3 | val C | name C | 333  | 33   | 3    |</span></span>
<span class="line"><span>|    4 | val D | name D | 444  | 44   | 4    |</span></span>
<span class="line"><span>|    5 | val E | name E | 555  | 55   | 5    |</span></span>
<span class="line"><span>+------+-------+--------+------+------+------+</span></span>
<span class="line"><span>4 rows in set (0.00 sec)</span></span></code></pre></div><h2 id="truncate文" tabindex="-1"><code>TRUNCATE</code>文 <a class="header-anchor" href="#truncate文" aria-label="Permalink to &quot;\`TRUNCATE\`文&quot;">​</a></h2><p> <code>TRUNCATE</code>文はテーブルの全データを削除する命令。<code>DELETE</code>と似ているが、truncate(切り捨て)という言葉のとおり、余計なことはいっさいせずに無慈悲にデータを消去可能。</p><h2 id="truncate構文" tabindex="-1"><code>TRUNCATE</code>構文 <a class="header-anchor" href="#truncate構文" aria-label="Permalink to &quot;\`TRUNCATE\`構文&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TRUNCATE TABLE テーブル名</span></span></code></pre></div><p> <code>TRUNCATE</code>文は<code>データ定義文(DDL)</code>に分類される。<code>TRUNCATE</code>文を発行すると自動コミットが内部的に走るため、消去したデータは<code>ROLLBACK</code>できない。</p><h2 id="sql-文の組み合わせ" tabindex="-1">SQL 文の組み合わせ <a class="header-anchor" href="#sql-文の組み合わせ" aria-label="Permalink to &quot;SQL 文の組み合わせ&quot;">​</a></h2><h2 id="selectの結果をinsert" tabindex="-1"><code>SELECT</code>の結果を<code>INSERT</code> <a class="header-anchor" href="#selectの結果をinsert" aria-label="Permalink to &quot;\`SELECT\`の結果を\`INSERT\`&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INO テーブル名1 (テーブル1のカラム羅列)</span></span>
<span class="line"><span>    SELECT テーブル2のカラム羅列 FROM テーブル名2 WHERE テーブル2の抽出条件</span></span></code></pre></div><p> あらゆる<code>SELECT</code>文の結果を、別のテーブルへと登録できる。<code>SELECT</code>文での取得列と、<code>INSERT</code>文に記述する挿入先は対応している必要がある。</p><h2 id="selectの結果を新たなテーブルに" tabindex="-1"><code>SELECT</code>の結果を新たなテーブルに <a class="header-anchor" href="#selectの結果を新たなテーブルに" aria-label="Permalink to &quot;\`SELECT\`の結果を新たなテーブルに&quot;">​</a></h2><p> <code>CREATE TABLE ~ SELECT</code>文。<code>SELECT</code>文の結果をカラムを持つ新たなテーブルを作成して、データを登録可能。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE テーブル名1</span></span>
<span class="line"><span>    AS SELECT テーブル2のカラム羅列 FROM テーブル名2 WHERE テーブル2の抽出条件</span></span></code></pre></div><h2 id="where文で指定する条件" tabindex="-1"><code>WHERE</code>文で指定する条件 <a class="header-anchor" href="#where文で指定する条件" aria-label="Permalink to &quot;\`WHERE\`文で指定する条件&quot;">​</a></h2><p> <code>WHERE</code>句に記述する条件について、</p><h2 id="条件が複数ある場合" tabindex="-1">条件が複数ある場合 <a class="header-anchor" href="#条件が複数ある場合" aria-label="Permalink to &quot;条件が複数ある場合&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    条件1 AND 条件2 AND 条件3 ....</span></span>
<span class="line"><span>    条件1 AND (条件2 OR 条件3) ....</span></span></code></pre></div><p> 各条件を<code>AND</code>や<code>OR</code>でつなげて指定する。括弧も使用可能。</p><h2 id="条件の使い方" tabindex="-1">条件の使い方 <a class="header-anchor" href="#条件の使い方" aria-label="Permalink to &quot;条件の使い方&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    col1 = 値 : 指定値に一致するもの</span></span>
<span class="line"><span>    col1 &lt;&gt; 値 : 指定値に一致しないもの</span></span>
<span class="line"><span>    col1 &gt; 値 : 指定値より大きいもの</span></span>
<span class="line"><span>    col1 &gt;= 値 : 指定値以上のもの</span></span>
<span class="line"><span>    col1 &lt; 値 : 指定値より小さいもの</span></span>
<span class="line"><span>    col1 &lt;= 値 : 指定値以下のもの</span></span>
<span class="line"><span>    col1 LIKE &#39;%文字列%&#39; : 指定された文字列を含むもの</span></span>
<span class="line"><span>    col1 LIKE &#39;文字列%&#39; : 指定された文字列で始まるもの</span></span>
<span class="line"><span>    col1 LIKE &#39;%文字列&#39; : 指定された文字列で終わるもの</span></span>
<span class="line"><span>    col1 IN (値1, 値2...) : 指定された値1, 値2... のいずれかに一致するもの</span></span></code></pre></div><p> カラムや値には関数を使用することもできる。<code>インデックス</code>が張ったカラムの場合、関数を使用することで<code>インデックス</code>が適用されなくなる点に注意。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    LEFT(col1, 2) = &#39;01&#39;</span></span></code></pre></div><p> 値の部分には<code>サブクエリー</code>を使用可能。使用できる<code>サブクエリー</code>は、<code>IN</code>の場合は1列の値を複数返すもの、<code>IN</code>以外の場合は1列の値を1つだけ返すもの。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    col1 IN (SELECT col2 FROM tbl2 WHERE category=&#39;22&#39;)</span></span></code></pre></div><p><code>LIKE</code>式の「<code>%</code>」はワイルドカード(0文字以上の文字列にマッチ)。「<code>_</code>」は任意の1文字にマッチ。</p><h2 id="sql-便利な式-構文" tabindex="-1">SQL 便利な式 構文 <a class="header-anchor" href="#sql-便利な式-構文" aria-label="Permalink to &quot;SQL 便利な式 構文&quot;">​</a></h2><h2 id="case式" tabindex="-1"><code>CASE</code>式 <a class="header-anchor" href="#case式" aria-label="Permalink to &quot;\`CASE\`式&quot;">​</a></h2><p> <code>SQL</code>処理内の<code>IF</code>文のようなものを実現するのが<code>CASE</code>式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CASE</span></span>
<span class="line"><span>    WHEN col1=&#39;THREE&#39; THEN 3</span></span>
<span class="line"><span>    WHEN col1=&#39;TWO&#39;   THEN 2</span></span>
<span class="line"><span>    WHEN col1=&#39;ONE&#39;   THEN 1</span></span>
<span class="line"><span>    ELSE              0</span></span>
<span class="line"><span>END</span></span></code></pre></div><p> 判断に使用する一方の辺が固定の場合は、次のように固定辺を1箇所にまとめて記述可能。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CASE col1</span></span>
<span class="line"><span>    WHEN &#39;THREE&#39; THEN 3</span></span>
<span class="line"><span>    WHEN &#39;TWO&#39;   THEN 2</span></span>
<span class="line"><span>    WHEN &#39;ONE&#39;   THEN 1</span></span>
<span class="line"><span>    ELSE              0</span></span>
<span class="line"><span>END</span></span></code></pre></div><h2 id="window関数" tabindex="-1"><code>WINDOW</code>関数 <a class="header-anchor" href="#window関数" aria-label="Permalink to &quot;\`WINDOW\`関数&quot;">​</a></h2><p> <code>WINDOW</code>関数は「行をひとつにまとめない<code>GROUP BY</code>」とも言われる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT id,</span></span>
<span class="line"><span>    RANK() OVER (PARTITON BY col1, col2 ORDER BY col3) AS rnk</span></span>
<span class="line"><span>  FROM tbl1;</span></span></code></pre></div><p> <code>tbl1</code>テーブルから、<code>col1</code>と<code>col2</code>カラムの組み合わせをグループとし、それぞれのグループ内で<code>col3</code>の小さい順に1から番号を振った値を<code>rnk</code>という名前のカラムとして返す。</p><h2 id="共通表形式-cte" tabindex="-1">共通表形式(<code>CTE</code>) <a class="header-anchor" href="#共通表形式-cte" aria-label="Permalink to &quot;共通表形式(\`CTE\`)&quot;">​</a></h2><p> <code>CTE</code>は<code>SQL</code>文内でのみ有効なテンポラリーテーブルのようなもの。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WITH cte_g1 AS (</span></span>
<span class="line"><span>    SELECT id, ST_Distance(pos1, pos2) dist FROM g1</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>SELECT id, round(dist, 2) do, round(dist/60,2) fun, round(60/60,2) byou</span></span>
<span class="line"><span>    FROM cte_g1;</span></span></code></pre></div><p> <code>cte_g1</code>という名前をつけた<code>CTE</code>で2点間の距離を求めている。続くメインの<code>SELECT</code>文で、この<code>CTE</code>を利用して60で割った値と60 × 60で割った値を求めている。</p><h2 id="トランザクションの制御" tabindex="-1"><code>トランザクション</code>の制御 <a class="header-anchor" href="#トランザクションの制御" aria-label="Permalink to &quot;\`トランザクション\`の制御&quot;">​</a></h2><p> データーベースを安全に更新するには、<code>トランザクション</code>が欠かせない。<code>トランザクション</code>は、複数の<code>SQL</code>文をひとかたまりとして、その全体を確定させる機能。処理の途中でサーバーが停止した場合でも、一部の<code>SQL</code>だけが確定しまうことを避けられる。</p><h2 id="トランザクションの開始と終了" tabindex="-1"><code>トランザクション</code>の開始と終了 <a class="header-anchor" href="#トランザクションの開始と終了" aria-label="Permalink to &quot;\`トランザクション\`の開始と終了&quot;">​</a></h2><p> <code>トランザクション</code>を開始するには<code>START TRANSACTION</code>文を使用する(<code>BEGIN</code>でも可能)。更新系<code>SQL</code>をいくつか実行して、それらの変更を確定させたいときは、<code>COMMIT</code>文を実行。<code>SQL</code>実行後に、確定せずにそれらを元に戻す場合<code>ROLLBACK</code>文を実行。</p><h2 id="commitの使用方法" tabindex="-1"><code>COMMIT</code>の使用方法 <a class="header-anchor" href="#commitの使用方法" aria-label="Permalink to &quot;\`COMMIT\`の使用方法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; START TRANSACTION;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>    :</span></span>
<span class="line"><span>mysql&gt; COMMIT;</span></span></code></pre></div><h2 id="rollbackの使用方法" tabindex="-1"><code>ROLLBACK</code>の使用方法 <a class="header-anchor" href="#rollbackの使用方法" aria-label="Permalink to &quot;\`ROLLBACK\`の使用方法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; START TRANSACTION;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>    : ここで何らかの、処理続行をしたくない事象が発生</span></span>
<span class="line"><span>mysql&gt; ROLLBACK;</span></span></code></pre></div><p> <code>トランザクション</code>実行中に新たに<code>START TRANSACTION</code>を実行すると、実行中のトランザクションはその場で<code>COMMIT</code>される。</p><h2 id="暗黙のトランザクション制御" tabindex="-1">暗黙の<code>トランザクション</code>制御 <a class="header-anchor" href="#暗黙のトランザクション制御" aria-label="Permalink to &quot;暗黙の\`トランザクション\`制御&quot;">​</a></h2><p> <code>トランザクション</code>の実行中に、電源断など何らかの理由でサーバーが停止した場合、次回の<code>MySQL</code>起動時に、実行中の<code>トランザクション</code>はすべて自動的に<code>ROLLBACK</code>される。</p><h2 id="自動的なrollbackの使用方法" tabindex="-1">自動的な<code>ROLLBACK</code>の使用方法 <a class="header-anchor" href="#自動的なrollbackの使用方法" aria-label="Permalink to &quot;自動的な\`ROLLBACK\`の使用方法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; START TRANSACTION;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>    : ここでサーバー停止</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span> 次回起動時に自動的に ROLLBACK</span></span></code></pre></div><h2 id="savepoint" tabindex="-1"><code>SAVEPOINT</code> <a class="header-anchor" href="#savepoint" aria-label="Permalink to &quot;\`SAVEPOINT\`&quot;">​</a></h2><p> <code>トランザクション</code>制御では、<code>SAVEPOINT</code>も使用可能。<code>SAVEPOINT</code>は、<code>トランザクション</code>実行中の楔のようなもの。<code>ROLLBACK</code>で、指定した楔の部分までだけを戻せる。元々の<code>トランザクション</code>は継続する。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; START TRANSACTION;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>mysql&gt; START TRANSACTION mysave1;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>mysql&gt; START TRANSACTION mysave2;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>mysql&gt; START TRANSACTION mysave3;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>mysql&gt; START TRANSACTION mysave4;</span></span>
<span class="line"><span>    : いくつかの更新処理実行</span></span>
<span class="line"><span>mysql&gt; COMMIT;</span></span></code></pre></div><h2 id="オートコミットモード" tabindex="-1">オートコミットモード <a class="header-anchor" href="#オートコミットモード" aria-label="Permalink to &quot;オートコミットモード&quot;">​</a></h2><p> <code>MySQL</code>は、デフォルトの動作として、ひとつの更新クエリーを実行すると即座にコミットされる。これを<code>オートコミット</code>(自動コミット)と言う。<code>オートコミットモード</code>やめるには、次のようにする。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET AUTOCOMMIT=0;</span></span></code></pre></div><p> <code>オートコミットモード</code>に戻すには次のようにする。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET AUTOCOMMIT=1;</span></span></code></pre></div><h2 id="mysql-データ型" tabindex="-1">MySQL データ型 <a class="header-anchor" href="#mysql-データ型" aria-label="Permalink to &quot;MySQL データ型&quot;">​</a></h2><h2 id="数値型" tabindex="-1">数値型 <a class="header-anchor" href="#数値型" aria-label="Permalink to &quot;数値型&quot;">​</a></h2><p> 数値型は、次のような型に分類される。</p><ul><li>真数値 : 整数型</li><li>真数値 : 固定少数点型</li><li>概数値 : 浮動小数点型</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">型名</th><th style="text-align:left;">バイト数</th><th style="text-align:left;">Signed 型の最大値</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">TINYINT</td><td style="text-align:left;">1</td><td style="text-align:left;">127</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">SMALLINT</td><td style="text-align:left;">2</td><td style="text-align:left;">32,767</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">MEDIUMINT</td><td style="text-align:left;">3</td><td style="text-align:left;">8,388,607</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">INTEGER</td><td style="text-align:left;">4</td><td style="text-align:left;">2,147,483,647</td><td style="text-align:left;">INTEGER は INT をシノニムに持つ</td></tr><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">BIGINT</td><td style="text-align:left;">8</td><td style="text-align:left;">2 ** 63 -1</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">固定小数点型</td><td style="text-align:left;">DECIMAL(P, S)</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">P は精度、S はスケール(小数点以下の桁数)</td></tr><tr><td style="text-align:left;">固定小数点型</td><td style="text-align:left;">NUMBERIC(P, S)</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">P は精度、S はスケール(小数点以下の桁数)</td></tr><tr><td style="text-align:left;">浮動小数点型</td><td style="text-align:left;">FLOAT(p)</td><td style="text-align:left;">4</td><td style="text-align:left;"></td><td style="text-align:left;">p は仮引数部のビット数。24 を超えた時に自動的に DOUBLE 形になる</td></tr><tr><td style="text-align:left;">浮動小数点型</td><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">8</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="文字列型" tabindex="-1">文字列型 <a class="header-anchor" href="#文字列型" aria-label="Permalink to &quot;文字列型&quot;">​</a></h2><p> 文字列型には、<code>固定長文字列</code>と<code>可変長文字列</code>がある。</p><ul><li>固定長文字列 : <code>CHAR</code></li><li>可変長文字列 : <code>VARCHAR</code></li></ul><p> <code>固定長文字列</code>である<code>CHAR</code>型はそのカラムに入れる値が何文字であっても内部的にカラムに宣言されたサイズの領域を使用する。<code>可変長文字列</code>である<code>VARCHAR</code>型は、カラムに宣言されたサイズを上限値として値の文字数だけの領域を使用する。</p><p> <code>MySQL</code>では、<code>VARCHAR</code>型の右側のスペースは指定されたとおりに保持される。(<code>RDBMS</code>により、スペースが削除されてしまうものもある)。<code>CHAR</code>型でカラムに宣言したサイズの領域を使用するのは保管された状態の時であり、取り出す際にはこれらのスペースは削除される。このため、<code>VARCHAR</code>型と異なり、<code>CHAR</code>型では右側のスペースは情報として保持されない。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; CREATE TABLE mychartest (id INTEGER, val VARCHAR(4), val2 CHAR(4));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; INSERT INTO mychartest VALUES (1, &#39;a&#39;, &#39;a&#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO mychartest VALUES (2, &#39;a &#39;, &#39;a &#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO mychartest VALUES (3, &#39;a  &#39;, &#39;a  &#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SELECT id, CONCAT(val, &quot;***&quot;) varcharcol, CONCAT(val2, &quot;***&quot;) charcol FROM mychartest;</span></span>
<span class="line"><span>+------+------------+---------+</span></span>
<span class="line"><span>| id   | varcharcol | charcol |</span></span>
<span class="line"><span>+------+------------+---------+</span></span>
<span class="line"><span>|    1 | a***       | a***    |</span></span>
<span class="line"><span>|    2 | a ***      | a***    |</span></span>
<span class="line"><span>|    3 | a  ***     | a***    |</span></span>
<span class="line"><span>+------+------------+---------+</span></span></code></pre></div><h3 id="日付時刻型" tabindex="-1">日付時刻型 <a class="header-anchor" href="#日付時刻型" aria-label="Permalink to &quot;日付時刻型&quot;">​</a></h3><p> <code>MySQL</code>の日付時刻に関する型</p><ul><li><code>DATETIME</code>型 : 日付と時刻を格納可能。(<code>1970-01-01 00:00:01</code>~<code>2038-01-19 03:14:07</code>)</li><li><code>TIMESTAMP</code>型 : 日付と時刻を格納可能。(<code>1970-01-01 00:00:01</code>~<code>2038-01-19 03:14:07</code>)</li><li><code>TIME</code>型 : 時刻情報を格納可能。(<code>-839:59</code>~<code>838:59:59</code>)</li><li><code>YEAR</code>型 : 年の情報を格納可能。</li></ul><h2 id="その他の型" tabindex="-1">その他の型 <a class="header-anchor" href="#その他の型" aria-label="Permalink to &quot;その他の型&quot;">​</a></h2><h3 id="blob型" tabindex="-1"><code>BLOB</code>型 <a class="header-anchor" href="#blob型" aria-label="Permalink to &quot;\`BLOB\`型&quot;">​</a></h3><p> 大きなバイナリを扱うための型。<code>BLOB</code>型は<code>MySQL</code>独自の型。</p><ul><li><code>TINYBLOB</code></li><li><code>BLOB</code></li><li><code>MEDIUMBLOB</code></li><li><code>LONGBLOB</code></li></ul><h3 id="text型" tabindex="-1"><code>TEXT</code>型 <a class="header-anchor" href="#text型" aria-label="Permalink to &quot;\`TEXT\`型&quot;">​</a></h3><p> 65,535 バイトを超える長い文字列を扱うための型。<code>TEXT</code>型は<code>MYSQL</code>独自の型。</p><ul><li><code>TINYTEXT</code></li><li><code>TEXT</code></li><li><code>MEDIUMTEXT</code></li><li><code>LONGTEXT</code></li></ul><p> 長い文字列を<code>BLOB</code>型に格納しても構わないが、その場合バイナリ情報として格納され、ソートや比較で使われる照合順序を考慮しない。<code>TEXT</code>型では照合順序に対応する。</p><h3 id="enum型" tabindex="-1"><code>ENUM</code>型 <a class="header-anchor" href="#enum型" aria-label="Permalink to &quot;\`ENUM\`型&quot;">​</a></h3><p> 列挙型。テーブル生成時に<code>ENUM</code>で宣言した値のみをカラムに登録できる。<code>ENUM</code>型は<code>MySQL</code>独自の型。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; CREATE TABLE enumsample </span></span>
<span class="line"><span>    -&gt;      (id INTEGER,</span></span>
<span class="line"><span>    -&gt;       val ENUM(&#39;MySQL&#39;, &#39;PostgreSQL&#39;, &#39;Oracle&#39;, &#39;Db2&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; INSERT INTO enumsample VALUES (1, &#39;MySQL&#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO enumsample VALUES (2, &#39;mysql&#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO enumsample VALUES (3, &#39;Oracle&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SELECT * FROM  enumsample;</span></span>
<span class="line"><span>+------+--------+</span></span>
<span class="line"><span>| id   | val    |</span></span>
<span class="line"><span>+------+--------+</span></span>
<span class="line"><span>|    1 | MySQL  |</span></span>
<span class="line"><span>|    2 | MySQL  |</span></span>
<span class="line"><span>|    3 | Oracle |</span></span>
<span class="line"><span>+------+--------+</span></span></code></pre></div><p> <code>ENUM</code>型での一致判定はコレーション(照合順序)に従う。<code>&quot;MySQL&quot;</code>という文字列の格納が<code>ENUM</code>で許可されているとき、<code>INSERT</code>文に&quot;mysql&quot;と小文字で指定しても(デフォルトの挙動では)同一視されるため、<code>INSERT</code>が成功する。登録された値は<code>ENUM</code>で指定されたも、<code>&quot;mysql&quot;</code>ではなく<code>&quot;MySQL&quot;</code>になる。<code>ENUM</code>で指定された値以外のものを挿入しようととするとエラーになる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; INSERT INTO enumsample VALUES (4, &#39;MariaDB&#39;);</span></span>
<span class="line"><span>ERROR 1265 (01000): Data truncated for column &#39;val&#39; at row 1</span></span></code></pre></div><h3 id="set型" tabindex="-1"><code>SET</code>型 <a class="header-anchor" href="#set型" aria-label="Permalink to &quot;\`SET\`型&quot;">​</a></h3><p> テーブル生成時に宣言した値集合から複数のものを保持できるのが<code>SET</code>型。<code>SET</code>型は、同じ値を複数持つことはできない。また、<code>INSERT</code>時にどのような順序を指定しても、取り出す時にはテーブル宣言時の順序で取り出される。照合順序の挙動は<code>ENUM</code>型と同様。<code>SET</code>型は<code>MySQL</code>独自の型</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; CREATE TABLE setsample (</span></span>
<span class="line"><span>    -&gt;        id INTEGER,</span></span>
<span class="line"><span>    -&gt;        val SET(&#39;Sno&#39;, &#39;S&#39;, &#39;A&#39;, &#39;T&#39;, &#39;B&#39;, &#39;GB&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; INSERT INTO setsample VALUES (1,&#39;s,a,b&#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO setsample VALUES (2,&#39;a,a,t&#39;);</span></span>
<span class="line"><span>mysql&gt; INSERT INTO setsample VALUES (3,&#39;t,a&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SELECT * FROM setsample;</span></span>
<span class="line"><span>+------+-------+</span></span>
<span class="line"><span>| id   | val   |</span></span>
<span class="line"><span>+------+-------+</span></span>
<span class="line"><span>|    1 | S,A,B |</span></span>
<span class="line"><span>|    2 | A,T   |</span></span>
<span class="line"><span>|    3 | A,T   |</span></span>
<span class="line"><span>+------+-------+</span></span></code></pre></div><h3 id="json型" tabindex="-1"><code>JSON</code>型 <a class="header-anchor" href="#json型" aria-label="Permalink to &quot;\`JSON\`型&quot;">​</a></h3><p> <code>JSON</code>データを格納。<code>JSON</code>の文字列として格納されるのではなく、解析され、内部的にバイナリとして格納される。</p><h3 id="spatial型" tabindex="-1"><code>SPATIAL</code>型 <a class="header-anchor" href="#spatial型" aria-label="Permalink to &quot;\`SPATIAL\`型&quot;">​</a></h3><p> 空間情報型。軽度や緯度など格納。</p><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><h2 id="現在日時を返す関数" tabindex="-1">現在日時を返す関数 <a class="header-anchor" href="#現在日時を返す関数" aria-label="Permalink to &quot;現在日時を返す関数&quot;">​</a></h2><p> <code>MySQL</code>では<code>FROM</code>句を省略できる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT NOW();</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| NOW()               |</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| 2022-02-22 02:22:22 |</span></span>
<span class="line"><span>+---------------------+</span></span></code></pre></div><p> ほかの<code>RDBMS</code>の中には、<code>FROM</code>句が必須であるために、どのテーブルからもデータを取得しない場合は<code>FROM dual</code>と記述するものがある。<code>MySQL</code>でもそれに合わせるために、<code>FROM dual</code>を付けても動作するようになっている。しかし、<code>MySQL</code>では<code>FROM</code>句が必須ではないので、わざわざ打つ必要はない。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT NOW() FROM dual;</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| NOW()               |</span></span>
<span class="line"><span>+---------------------+</span></span>
<span class="line"><span>| 2022-02-22 02:22:22 |</span></span>
<span class="line"><span>+---------------------+</span></span></code></pre></div><h3 id="日付を加算する" tabindex="-1">日付を加算する <a class="header-anchor" href="#日付を加算する" aria-label="Permalink to &quot;日付を加算する&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DATE_ADD(date, INTERVAL expr unit)</span></span></code></pre></div><h3 id="_1ヶ月後の日付を取得する" tabindex="-1">1ヶ月後の日付を取得する <a class="header-anchor" href="#_1ヶ月後の日付を取得する" aria-label="Permalink to &quot;1ヶ月後の日付を取得する&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT DATE_ADD(NOW(), INTERVAL 1 MONTH);</span></span>
<span class="line"><span>+-----------------------------------+</span></span>
<span class="line"><span>| DATE_ADD(NOW(), INTERVAL 1 MONTH) |</span></span>
<span class="line"><span>+-----------------------------------+</span></span>
<span class="line"><span>| 2022-03-22 02:22:22               |</span></span>
<span class="line"><span>+-----------------------------------+</span></span></code></pre></div><h3 id="変換する挙動を比較する方法" tabindex="-1">変換する挙動を比較する方法 <a class="header-anchor" href="#変換する挙動を比較する方法" aria-label="Permalink to &quot;変換する挙動を比較する方法&quot;">​</a></h3><p> 元の値があり、それを変換する関数の挙動を見たいときには並べて指定する。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT NOW() AS a, DATE_ADD(NOW(), INTERVAL 1 MONTH) AS b;</span></span>
<span class="line"><span>+---------------------+---------------------+</span></span>
<span class="line"><span>| a                   | b                   |</span></span>
<span class="line"><span>+---------------------+---------------------+</span></span>
<span class="line"><span>| 2024-03-22 07:30:55 | 2024-04-22 07:30:55 |</span></span>
<span class="line"><span>+---------------------+---------------------+</span></span></code></pre></div><h2 id="固有" tabindex="-1">固有 <a class="header-anchor" href="#固有" aria-label="Permalink to &quot;固有&quot;">​</a></h2><h2 id="コメント" tabindex="-1">コメント <a class="header-anchor" href="#コメント" aria-label="Permalink to &quot;コメント&quot;">​</a></h2><p> <code>MySQL</code>のコメントは、ほかの<code>RDBMS</code>と同様「<code>--</code>」を使用可能(<code>/*...*/</code>も使用可能)。ただし、ほかの<code>RDBMS</code>と異なり、「<code>--</code>」の後ろに空白を1つ挟む必要がある。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT &#39;A&#39;; --display &#39;A&#39;</span></span>
<span class="line"><span>+---+</span></span>
<span class="line"><span>| A |</span></span>
<span class="line"><span>+---+</span></span>
<span class="line"><span>| A |</span></span>
<span class="line"><span>+---+</span></span></code></pre></div><p> <code>MySQL</code>では負の数値を表す際に、必ずしも括弧が必要なわけではない。次のようなクエリーとコメントの区別がつかないため、コメントのときは「<code>--</code>」の後ろに空白を入れる必要がある。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT 4--3;</span></span>
<span class="line"><span>+------+</span></span>
<span class="line"><span>| 4--3 |</span></span>
<span class="line"><span>+------+</span></span>
<span class="line"><span>|    7 |</span></span>
<span class="line"><span>+------+</span></span></code></pre></div><p>※ <code>4-(-3)</code>と同じ意味</p><h2 id="文字列のクォート" tabindex="-1">文字列のクォート <a class="header-anchor" href="#文字列のクォート" aria-label="Permalink to &quot;文字列のクォート&quot;">​</a></h2><p> <code>MySQL</code>では文字列を囲むクォート文字として、<code>ダブルクォート</code>も<code>シングルクォート</code>も同じように使用可能。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT &quot;stringA&quot; a, &#39;stringB&#39; b;</span></span>
<span class="line"><span>+---------+---------+</span></span>
<span class="line"><span>| a       | b       |</span></span>
<span class="line"><span>+---------+---------+</span></span>
<span class="line"><span>| stringA | stringB |</span></span>
<span class="line"><span>+---------+---------+</span></span></code></pre></div><h2 id="if-not-exists" tabindex="-1"><code>IF NOT EXISTS</code> <a class="header-anchor" href="#if-not-exists" aria-label="Permalink to &quot;\`IF NOT EXISTS\`&quot;">​</a></h2><p> テーブル作成時に「もし存在していなかったら作成する」というオプションを指定する。</p><h2 id="if-exists" tabindex="-1"><code>IF EXISTS</code> <a class="header-anchor" href="#if-exists" aria-label="Permalink to &quot;\`IF EXISTS\`&quot;">​</a></h2><p> テーブル破棄時に「もし存在している場合は削除する」というオプションを指定する。<code>IF EXISTS</code>は、<code>MySQL</code>独自のオプション。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; DROP TABLE IF EXISTS mytable111;</span></span></code></pre></div><h2 id="create-database" tabindex="-1"><code>CREATE DATABASE</code> <a class="header-anchor" href="#create-database" aria-label="Permalink to &quot;\`CREATE DATABASE\`&quot;">​</a></h2><p> <code>MySQL</code>では、「<code>データべース</code>」という単位の中にテーブルを作成する。ほかの<code>RDBMS</code>では「<code>スキーマ</code>」であることも多い。そのため、<code>CREATE DATABASE</code> / <code>DROP DATABASE</code>文は<code>MySQL</code>独自の命令。</p><h2 id="カラム別名" tabindex="-1">カラム別名 <a class="header-anchor" href="#カラム別名" aria-label="Permalink to &quot;カラム別名&quot;">​</a></h2><p> <code>MySQL</code>では、<code>SELECT</code>時にカラムに付けた別名を、<code>ORDER BY</code>句や<code>GROUP BY</code>句で使用可能。カラム<code>MAX(name)</code>に付けた<code>onename</code>という別名を、<code>OREDER BY</code>で使う例。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT id this_id, MAX(name) onename</span></span>
<span class="line"><span>    -&gt; FROM mytable</span></span>
<span class="line"><span>    -&gt; GROUP BY this_id</span></span>
<span class="line"><span>    -&gt; ORDER BY onename;</span></span>
<span class="line"><span>+---------+---------+</span></span>
<span class="line"><span>| this_id | onename |</span></span>
<span class="line"><span>+---------+---------+</span></span>
<span class="line"><span>|       2 | Alice   |</span></span>
<span class="line"><span>|       3 | Bob     |</span></span>
<span class="line"><span>|       1 | John    |</span></span>
<span class="line"><span>+---------+---------+</span></span></code></pre></div><h2 id="showコマンド" tabindex="-1"><code>SHOW</code>コマンド <a class="header-anchor" href="#showコマンド" aria-label="Permalink to &quot;\`SHOW\`コマンド&quot;">​</a></h2><p> <code>SHOW</code>コマンドは、<code>mysql</code>コマンドクライアントの命令であり、ほかの<code>RDBMS</code>には存在しない。</p><h2 id="文字列の結合" tabindex="-1">文字列の結合 <a class="header-anchor" href="#文字列の結合" aria-label="Permalink to &quot;文字列の結合&quot;">​</a></h2><p> <code>MySQL</code>では文字列の結合<code>||</code>や<code>&amp;&amp;</code>を使用不可能。<code>MySQL</code>では、<code>||</code>は<code>OR</code>、<code>&amp;&amp;</code>は<code>AND</code>として動作する。</p><p>※ <code>sql_mode</code>に<code>&#39;PIPES_AS_COUNT&#39;</code>を指定すると<code>||</code>を文字列結合として使用可能。</p><p> 文字列結合の行うには、<code>CONCAT()</code>関数を使用する。この関数は可変長の引数を取ることができる関数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT CONCAT(&#39;ABC&#39;, &#39;de&#39;, &#39;FGH&#39;, &#39;ij&#39;);</span></span>
<span class="line"><span>+----------------------------------+</span></span>
<span class="line"><span>| CONCAT(&#39;ABC&#39;, &#39;de&#39;, &#39;FGH&#39;, &#39;ij&#39;) |</span></span>
<span class="line"><span>+----------------------------------+</span></span>
<span class="line"><span>| ABCdeFGHij                       |</span></span>
<span class="line"><span>+----------------------------------+</span></span></code></pre></div><p> 文字列を結合しようとして<code>||</code>を使用したときに、<code>OR</code>演算が実行される。次の例では3つの<code>OR</code>結合をしているので、<code>FALSE(0)</code>が返される。文字列を結合しようとして<code>||</code>を使用したと思われる場合に<code>WARNING</code>が出されるので、<code>SHOW WARNINGS</code>で内容を確認すると文字列結合に<code>||</code>を使えないことがわかる。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT &#39;ABC&#39;||&#39;de&#39;||&#39;FGH&#39;;</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>| &#39;ABC&#39;||&#39;de&#39;||&#39;FGH&#39; |</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>|                  0 |</span></span>
<span class="line"><span>+--------------------+</span></span>
<span class="line"><span>1 row in set, 5 warnings (0.00 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SHOW WARNINGS;</span></span>
<span class="line"><span>+---------+------+-------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>| Level   | Code | Message                                                                                               |</span></span>
<span class="line"><span>+---------+------+-------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>| Warning | 1287 | &#39;|| as a synonym for OR&#39; is deprecated and will be removed in a future release. Please use OR instead |</span></span>
<span class="line"><span>| Warning | 1287 | &#39;|| as a synonym for OR&#39; is deprecated and will be removed in a future release. Please use OR instead |</span></span>
<span class="line"><span>| Warning | 1292 | Truncated incorrect DOUBLE value: &#39;ABC&#39;                                                               |</span></span>
<span class="line"><span>| Warning | 1292 | Truncated incorrect DOUBLE value: &#39;de&#39;                                                                |</span></span>
<span class="line"><span>| Warning | 1292 | Truncated incorrect DOUBLE value: &#39;FGH&#39;                                                               |</span></span>
<span class="line"><span>+---------+------+-------------------------------------------------------------------------------------------------------+</span></span>
<span class="line"><span>5 rows in set (0.00 sec)</span></span></code></pre></div>`,291)])])}const u=s(l,[["render",t]]);export{b as __pageData,u as default};
