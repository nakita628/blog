import{_ as t,c as a,o as r,a7 as i}from"./chunks/framework.CbZ0TyXs.js";const u=JSON.parse('{"title":"Clean Architecture パラダイム","description":"Clean Architecture パラダイム","frontmatter":{"date":"2025-04-16T00:00:00.000Z","title":"Clean Architecture パラダイム","description":"Clean Architecture パラダイム","tags":["Clean Architecture"],"prev":{"text":"Clean Architecture 2つの価値","link":"/posts/2025/04/15"},"next":{"text":"Clean Architecture 構造化プログラミング","link":"/posts/2025/04/19"}},"headers":[],"relativePath":"posts/2025/04/16.md","filePath":"posts/2025/04/16.md"}'),o={name:"posts/2025/04/16.md"};function l(c,e,n,s,p,h){return r(),a("div",null,[...e[0]||(e[0]=[i('<h1 id="clean-architecture-パラダイム" tabindex="-1">Clean Architecture パラダイム <a class="header-anchor" href="#clean-architecture-パラダイム" aria-label="Permalink to &quot;Clean Architecture パラダイム&quot;">​</a></h1><h2 id="パラダイム" tabindex="-1">パラダイム <a class="header-anchor" href="#パラダイム" aria-label="Permalink to &quot;パラダイム&quot;">​</a></h2><p> <code>ソフトウェアアーキテクチャ</code>は<code>コード</code>から始まる。</p><ul><li><p>ループ</p></li><li><p>分岐</p></li><li><p>代入</p></li><li><p>サブルーチン</p></li><li><p>スタック</p></li></ul><h2 id="構造化プログラミング" tabindex="-1">構造化プログラミング <a class="header-anchor" href="#構造化プログラミング" aria-label="Permalink to &quot;構造化プログラミング&quot;">​</a></h2><p> <code>if/then/eles</code>や<code>do/while/until</code>といった構文に置き換え。</p><p><strong>構造化プログラミングは、直接的な制御の移行に規律を課すものである。</strong></p><h2 id="オブジェクト指向プログラミング" tabindex="-1">オブジェクト指向プログラミング <a class="header-anchor" href="#オブジェクト指向プログラミング" aria-label="Permalink to &quot;オブジェクト指向プログラミング&quot;">​</a></h2><p> 関数から戻ってきたあとでも関数で宣言したローカル変数が存在し続けられるこの気づき。ローカル変数はインスタンス変数になる。そして、ネストした関数はメソッドに。その後、規律のある関数ポインタの使用によって、必然的にポリモーフィズムの発見につながる。</p><p><strong>オブジェクト指向プログラミングは、間接的な制御の移行に規律を課すものである。</strong></p><h2 id="関数型プログラミング" tabindex="-1">関数型プログラミング <a class="header-anchor" href="#関数型プログラミング" aria-label="Permalink to &quot;関数型プログラミング&quot;">​</a></h2><p> シンボルの値は変化しないという概念。</p><p><strong>関数型プログラミングは、代入に規律を課すものである。</strong></p>',13)])])}const _=t(o,[["render",l]]);export{u as __pageData,_ as default};
