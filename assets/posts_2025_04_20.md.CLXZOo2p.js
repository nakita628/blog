import{_ as c,C as d,c as p,o as t,a7 as r,b as o,w as e,a as l,G as i,a8 as n}from"./chunks/framework.CbZ0TyXs.js";const I=JSON.parse('{"title":"Clean Architecture オブジェクト指向プログラミング","description":"Clean Architecture オブジェクト指向プログラミング","frontmatter":{"date":"2025-04-20T00:00:00.000Z","title":"Clean Architecture オブジェクト指向プログラミング","description":"Clean Architecture オブジェクト指向プログラミング","tags":["Clean Architecture"],"prev":{"text":"Clean Architecture 構造化プログラミング","link":"/posts/2025/04/19"},"next":{"text":"Clean Architecture 関数型プログラミング","link":"/posts/2025/04/21"}},"headers":[],"relativePath":"posts/2025/04/20.md","filePath":"posts/2025/04/20.md"}'),h={name:"posts/2025/04/20.md"};function u(A,a,_,m,b,f){const s=d("Mermaid");return t(),p("div",null,[a[2]||(a[2]=r('<h1 id="clean-architecture-オブジェクト指向プログラミング" tabindex="-1">Clean Architecture オブジェクト指向プログラミング <a class="header-anchor" href="#clean-architecture-オブジェクト指向プログラミング" aria-label="Permalink to &quot;Clean Architecture オブジェクト指向プログラミング&quot;">​</a></h1><ul><li><p>カプセル化</p></li><li><p>継承</p></li><li><p>ポリモーフィズム</p></li></ul><h2 id="カプセル化" tabindex="-1">カプセル化 <a class="header-anchor" href="#カプセル化" aria-label="Permalink to &quot;カプセル化&quot;">​</a></h2><p> 「データ(状態)」と「そのデータを操作するメソッド(振る舞い)」を一つの単位(クラス)にまとめて、外部から不必要にアクセスできないようにする仕組み。</p><h2 id="継承" tabindex="-1">継承 <a class="header-anchor" href="#継承" aria-label="Permalink to &quot;継承&quot;">​</a></h2><p> 継承は、既存のクラス(親クラス・スーパークラス)から、その機能や性質を引き継いだ新しいクラス(子クラス・サブクラス)を作る仕組み。</p><h2 id="ポリモーフィズム" tabindex="-1">ポリモーフィズム <a class="header-anchor" href="#ポリモーフィズム" aria-label="Permalink to &quot;ポリモーフィズム&quot;">​</a></h2><p> ポリモーフィズムは、同じメソッド名でも、異なる動作を実行できる性質のこと。</p><h2 id="依存関係逆転" tabindex="-1">依存関係逆転 <a class="header-anchor" href="#依存関係逆転" aria-label="Permalink to &quot;依存関係逆転&quot;">​</a></h2><p> 「上位モジュール(ビジネスロジック)が下位モジュール(詳細実装)に依存するのではなく、 どちらも抽象(インターフェース)に依存すべきである」という原則。</p><h2 id="依存関係逆転-1" tabindex="-1">依存関係逆転 <a class="header-anchor" href="#依存関係逆転-1" aria-label="Permalink to &quot;依存関係逆転&quot;">​</a></h2>',11)),(t(),o(n,null,{default:e(()=>[i(s,{id:"mermaid-47",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20HL1%0A%0A%20%20%20%20class%20I%20%7B%0A%20%20%20%20%20%20%20%20%3C%3Cinterface%3E%3E%0A%20%20%20%20%20%20%20%20%2BF()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20ML1%20%7B%0A%20%20%20%20%20%20%20%20%2BF()%0A%20%20%20%20%7D%0A%0A%20%20%20%20HL1%20--%3E%20I%0A%20%20%20%20ML1%20--%7C%3E%20I%0A%20%20%20%20HL1%20..%3E%20ML1%0A"})]),fallback:e(()=>[...a[0]||(a[0]=[l(" Loading... ",-1)])]),_:1})),a[3]||(a[3]=r('<p> モジュール<code>HL1</code>がモジュール<code>ML1</code>にある<code>F()</code>関数を呼び出している。インターフェイス経由で関数を呼び出しているところが、ソースコードの仕掛け。実行時には、インターフェイスには存在しない。<code>HL1</code>は<code>ML1</code>にある<code>F()</code>を呼び出すだけ。</p><p> <code>ML1</code>とインターフェイス<code>I</code>のソースコードの依存関係(継承関係)が、制御の流れと逆転していることに注目。これは<strong>依存関係逆転</strong>と呼ばれ、ソフトウェアアーキテクトに大きな影響を与えるもの。</p><p> オブジェクト指向言語が安全で便利なポリモーフィズムを提供しているというのは、<strong>ソースコードの依存関係は(たとえどこにあっても)逆転できる</strong>事を意味する。</p><p> このアプローチを使用することで、オブジェクト指向で書かれたシステムに取り組んでいるソフトウェアアーキテクトは、システムにあるすべてのソースコードの依存関係の方向を<strong>絶対的に制御</strong>可能。依存関係を制御の流れに合わせる必要はない。どのモジュールが呼び出しを行い、どのモジュールが呼び出されようとも、ソフトウェアアーキテクトはソースコードの依存関係をどの方向にも向けることができる。</p><p> システムのソースコードの依存関係を並び替えるだけで、他の方法を使わなくても、データベースとユーザーインターフェイス(UI)をビジネスルールに依存させることが可能。</p><h2 id="データベースとユーザーインターフェイスはビジネスルールに依存" tabindex="-1">データベースとユーザーインターフェイスはビジネスルールに依存 <a class="header-anchor" href="#データベースとユーザーインターフェイスはビジネスルールに依存" aria-label="Permalink to &quot;データベースとユーザーインターフェイスはビジネスルールに依存&quot;">​</a></h2>',6)),(t(),o(n,null,{default:e(()=>[i(s,{id:"mermaid-66",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20UI%5B%22UI%22%5D%0A%20%20%20%20BusinessRules%5B%22Business%20Rules%22%5D%0A%20%20%20%20Database%5B%22Database%22%5D%0A%20%20%20%20%0A%20%20%20%20UI%20--%3E%20BusinessRules%0A%20%20%20%20BusinessRules%20-.-%3E%20UI%0A%0A%20%20%20%20Database%20--%3E%20BusinessRules%0A%20%20%20%20BusinessRules%20-.-%3E%20Database%0A"})]),fallback:e(()=>[...a[1]||(a[1]=[l(" Loading... ",-1)])]),_:1})),a[4]||(a[4]=r('<p> UIとデータベースをビジネスルールのプラグインにできる。ビジネスルールのソースコードからUIやデータベースに言及することはない。</p><p> 結果として、ソースコードと同じ依存関係のまま、ビジネスルール、UI、データベースを3つの異なるコンポーネントやデプロイメントユニットにまとめることが可能。ビジネスルールを含むコンポーネントは、UIやデータベースを含むコンポーネントに依存しない。</p><p> ビジネスルールは、UIやデータベースとは<strong>独立してデプロイ</strong>可能。UIやデータベースに対する変更が、ビジネスルールに影響を与えることはない。これらのコンポーネントはビジネスルールとは関係なく、独立してデプロイできるため。</p><h2 id="独立デプロイ可能性" tabindex="-1">独立デプロイ可能性 <a class="header-anchor" href="#独立デプロイ可能性" aria-label="Permalink to &quot;独立デプロイ可能性&quot;">​</a></h2><p> コンポーネントのソースコードを変更しても、そのコンポーネントだけ再デプロイすればいい。</p><h2 id="独立開発可能性" tabindex="-1">独立開発可能性 <a class="header-anchor" href="#独立開発可能性" aria-label="Permalink to &quot;独立開発可能性&quot;">​</a></h2><p> システムにあるモジュールを個別にデプロイできるなら、別々のチームが個別に開発可能。</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p> オブジェクト指向とは、「ポリモーフィズムを使用することで、システムにあるすべてのソースコードの依存関係を絶対的に制御する能力」。</p><p> これにより、アーキテクトは「プラグインアーキテクチャ」を作成可能。これは、上位レベルの方針を含んだモジュールを下位レベルの詳細を含んだモジュールから独立させること。下位レベルの詳細はプラグインモジュールとなり、上位レベルの方針を含んだモジュールとは独立して、デプロイおよび開発することが可能。</p>',10))])}const q=c(h,[["render",u]]);export{I as __pageData,q as default};
