import{_ as o,C as d,c as u,o as t,a7 as A,b as r,j as a,w as l,a as s,G as c,a8 as i}from"./chunks/framework.CbZ0TyXs.js";const S=JSON.parse('{"title":"Clean Architecture リスコフの置換原則","description":"Clean Architecture リスコフの置換原則","frontmatter":{"date":"2025-04-25T00:00:00.000Z","title":"Clean Architecture リスコフの置換原則","description":"Clean Architecture リスコフの置換原則","tags":["Clean Architecture"],"prev":{"text":"Clean Architecture オープン・クローズドの原則","link":"/posts/2025/04/24"},"next":{"text":"Clean Architecture インターフェイス分離の原則","link":"/posts/2025/04/26"}},"headers":[],"relativePath":"posts/2025/04/25.md","filePath":"posts/2025/04/25.md"}'),p={name:"posts/2025/04/25.md"};function m(B,e,C,h,g,L){const n=d("Mermaid");return t(),u("div",null,[e[2]||(e[2]=A('<p>インターフェイス分離の原則</p><h1 id="clean-architecture-リスコフの置換原則" tabindex="-1">Clean Architecture リスコフの置換原則 <a class="header-anchor" href="#clean-architecture-リスコフの置換原則" aria-label="Permalink to &quot;Clean Architecture リスコフの置換原則&quot;">​</a></h1><ul><li>S型のオブジェクトo1の各々に、対応するT型のオブジェクトo2が1つ存在し、Tを使用して定義されたプログラムPに対してo2の代わりにo1を使用してPの振る舞いが変わらない場合、SはTの派生型であると言える。</li></ul><h2 id="継承の使い方" tabindex="-1">継承の使い方 <a class="header-anchor" href="#継承の使い方" aria-label="Permalink to &quot;継承の使い方&quot;">​</a></h2><p> <code>License</code>クラスには<code>calcFee()</code>メソッドがあり、<code>Billing</code>アプリケーションから呼ばれている。また、<code>License</code>の「派生型」が2つある。<code>PersonalLicense</code>と<code>BusinessLicense</code>。それぞれ異なるアルゴリズムを用いてライセンス料を計算する。</p>',5)),(t(),r(i,null,{default:l(()=>[c(n,{id:"mermaid-19",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20Billing%20%7B%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20License%20%7B%0A%20%20%20%20%20%20%20%20%2BcalcFee()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20PersonalLicense%20%7B%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20BusinessLicense%20%7B%0A%20%20%20%20%20%20%20%20-users%0A%20%20%20%20%7D%0A%0A%20%20%20%20Billing%20--%3E%20License%0A%20%20%20%20License%20%3C%7C--%20PersonalLicense%0A%20%20%20%20License%20%3C%7C--%20BusinessLicense%0A"})]),fallback:l(()=>[...e[0]||(e[0]=[s(" Loading... ",-1)])]),_:1})),e[3]||(e[3]=a("p",null,[s(" この設計はリスコフの置換原則(LSP)を満たしている。"),a("code",null,"Billing"),s("アプリケーションは、使用している2つの派生型に依存していないため。どちらの派生型も"),a("code",null,"License"),s("型に置き換えることができる。")],-1)),e[4]||(e[4]=a("h2",{id:"正方形・長方形問題",tabindex:"-1"},[s("正方形・長方形問題 "),a("a",{class:"header-anchor",href:"#正方形・長方形問題","aria-label":'Permalink to "正方形・長方形問題"'},"​")],-1)),e[5]||(e[5]=a("p",null," リスコフの置換原則(LSP)違反。",-1)),(t(),r(i,null,{default:l(()=>[c(n,{id:"mermaid-29",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20User%0A%0A%20%20%20%20class%20Rectangle%20%7B%0A%20%20%20%20%20%20%20%20%2BsetH()%0A%20%20%20%20%20%20%20%20%2BsetW()%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Square%20%7B%0A%20%20%20%20%20%20%20%20%2BsetSide()%0A%20%20%20%20%7D%0A%0A%20%20%20%20User%20--%3E%20Rectangle%0A%20%20%20%20Square%20%3C%7C--%20Rectangle%0A"})]),fallback:l(()=>[...e[1]||(e[1]=[s(" Loading... ",-1)])]),_:1})),e[6]||(e[6]=a("p",null,[s(" "),a("code",null,"Square(正方形)"),s("は、"),a("code",null,"Rectangle(長方形)"),s("の適切な派生型とは言えない。なぜなら、"),a("code",null,"Rectangle"),s("は幅と高さをそれぞれ独立して変えられるのに対して、"),a("code",null,"Square"),s("は両方同時に変える必要がある。")],-1))])}const P=o(p,[["render",m]]);export{S as __pageData,P as default};
